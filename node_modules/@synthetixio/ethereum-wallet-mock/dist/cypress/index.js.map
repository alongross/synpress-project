{"version":3,"sources":["../../src/cypress/utils/configureSynpress.ts","../../src/cypress/utils/initEthereumWalletMock.ts","../../src/playwright/utils/mockEthereum.ts","../../src/playwright/constants.ts","../../src/cypress/constants/errors.ts","../../src/cypress/EthereumWalletMock.ts","../../src/constants.ts","../../src/type/EthereumWalletMockAbstract.ts"],"names":["require","port"],"mappings":"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","sourcesContent":["import { ensureRdpPort } from '@synthetixio/synpress-core'\n\nimport { initEthereumWalletMock } from './initEthereumWalletMock'\n\nlet port: number\n\n/**\n * Configures Synpress for use with the Ethereum Wallet Mock.\n *\n * This function sets up the necessary configurations and hooks for running\n * Cypress tests with the Ethereum Wallet Mock. It performs the following tasks:\n *\n * 1. Filters the available browsers to ensure only Chrome is used.\n * 2. Sets up a 'before:browser:launch' hook to enable debug mode and establish\n *    a Playwright connection.\n * 3. Sets up a 'before:spec' hook to initialize the Ethereum Wallet Mock before\n *    each test spec runs.\n *\n * @param on - Cypress plugin event handler\n * @param config - Cypress plugin configuration options\n * @returns Modified Cypress configuration\n * @throws Error If no Chrome browser is found in the configuration\n */\n\nexport default function configureSynpress(on: Cypress.PluginEvents, config: Cypress.PluginConfigOptions) {\n  const browsers = config.browsers.filter((b) => b.name === 'chrome')\n  if (browsers.length === 0) {\n    throw new Error('No Chrome browser found in the configuration')\n  }\n\n  on('before:browser:launch', async (_, launchOptions) => {\n    // Enable debug mode to establish playwright connection\n    const args = Array.isArray(launchOptions) ? launchOptions : launchOptions.args\n    port = ensureRdpPort(args)\n  })\n\n  on('before:spec', async () => {\n    await initEthereumWalletMock(port)\n  })\n\n  return {\n    ...config,\n    browsers\n  }\n}\n","import { readFileSync } from 'fs'\nimport { type BrowserContext, type Page, chromium } from '@playwright/test'\n\nimport { mockEthereum, web3MockPath } from '../../playwright/utils'\nimport { NO_CONTEXT, NO_PAGE } from '../constants/errors'\n\nlet context: BrowserContext | undefined\nlet cypressPage: Page | undefined\n\nconst getCypressPage = async () => {\n  if (!context) {\n    console.error(NO_CONTEXT)\n    return\n  }\n\n  cypressPage = context.pages()[0]\n\n  return cypressPage\n}\n\nexport async function connectPlaywrightToChrome(port: number) {\n  const debuggerDetails = await fetch(`http://127.0.0.1:${port}/json/version`)\n\n  const debuggerDetailsConfig = (await debuggerDetails.json()) as {\n    webSocketDebuggerUrl: string\n  }\n\n  const browser = await chromium.connectOverCDP(debuggerDetailsConfig.webSocketDebuggerUrl)\n\n  context = browser.contexts()[0]\n\n  return browser.isConnected()\n}\n\nexport async function initEthereumWalletMock(port: number) {\n  await connectPlaywrightToChrome(port)\n\n  if (!context) {\n    console.error(NO_CONTEXT)\n    return\n  }\n\n  await getCypressPage()\n\n  if (!cypressPage) {\n    console.error(NO_PAGE)\n    return\n  }\n\n  await context.addInitScript({\n    content: `${readFileSync(web3MockPath, 'utf-8')}\\n(${mockEthereum.toString()})();`\n  })\n}\n","export default function mockEthereum(\n  wallet: 'metamask' | 'coinbase' | 'phantom' | 'walletconnect' | 'walletlink' = 'metamask',\n  accounts: `0x${string}`[] = []\n) {\n  Web3Mock.mock({\n    blockchain: 'ethereum',\n    wallet,\n    accounts: {\n      return: accounts\n    }\n  })\n}\n","import { createRequire } from 'node:module'\nconst require = createRequire(import.meta.url)\n\n/**\n * The private key used for testing purposes.\n * @constant\n * @type {string}\n */\nexport const PRIVATE_KEY = 'ea084c575a01e2bbefcca3db101eaeab1d8af15554640a510c73692db24d0a6a'\n\nexport const DEFAULT_NETWORK_ID = '0xa'\n\n/**\n * Relative path to the web3-mock bundle.\n * @constant\n * @type {string}\n */\nexport const web3MockPath = require.resolve('@depay/web3-mock/dist/umd/index.bundle.js')\n","export const NO_CONTEXT = 'No browser context found. Connect Playwright first - connectPlaywright()'\nexport const NO_PAGE = 'No page found. Use getPage()'\nexport const MISSING_INIT = 'EthereumWalletMock not initialized. Use initEthereumWalletMock()'\n","import { mnemonicToAccount, privateKeyToAccount } from 'viem/accounts'\nimport { ACCOUNT_MOCK, BLOCKCHAIN } from '../constants'\nimport { EthereumWalletMockAbstract } from '../type/EthereumWalletMockAbstract'\nimport type { Network } from '../type/Network'\nimport type { WalletMock } from '../type/WalletMock'\n\nexport default class EthereumWalletMock extends EthereumWalletMockAbstract {\n  constructor(wallet: WalletMock = 'metamask') {\n    super(wallet)\n    this.wallet = wallet\n  }\n\n  // /**\n  //  * Imports a wallet using the given seed phrase.\n  //  *\n  //  * @param seedPhrase - The seed phrase to import.\n  //  */\n  importWallet(seedPhrase: string) {\n    this.seedPhrase = seedPhrase\n\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        accounts: { return: [ACCOUNT_MOCK] }\n      })\n    })\n  }\n\n  // /**\n  //  * Retrieves the current account address.\n  //  */\n  getAllAccounts(): Cypress.Chainable<`0x${string}`[]> {\n    return cy.window().then((cypressWindow) => {\n      return cypressWindow.ethereum.request({\n        method: 'eth_requestAccounts'\n      })\n    })\n  }\n\n  // /**\n  //  * Adds a new account. This account is based on the initially imported seed phrase.\n  //  */\n  addNewAccount() {\n    this.getAllAccounts().then((accounts) => {\n      const newAccount = mnemonicToAccount(this.seedPhrase || '', {\n        accountIndex: accounts?.length\n      })\n\n      cy.window().then((cypressWindow) => {\n        cypressWindow.Web3Mock.mock({\n          blockchain: BLOCKCHAIN,\n          wallet: this.wallet,\n          accounts: {\n            return: [newAccount.address, ...accounts]\n          }\n        })\n      })\n    })\n  }\n\n  // /**\n  //  * Imports a wallet using the given private key.\n  //  *\n  //  * @param privateKey - The private key to import.\n  //  */\n  importWalletFromPrivateKey(privateKey: `0x${string}`) {\n    const newAccount = privateKeyToAccount(privateKey)\n\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        accounts: { return: [newAccount.address] }\n      })\n    })\n  }\n\n  /**\n  //  * Switches to the account with the given name.\n  //  *\n  //  * @param accountAddress - The name of the account to switch to.\n  //  */\n  switchAccount(accountAddress: string) {\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        accounts: { return: [accountAddress] }\n      })\n    })\n  }\n\n  /**\n  //  * Adds a new network.\n  //  *\n  //  * @param network - The network object to use for adding the new network.\n  //  */\n  async addNetwork(network: Network) {\n    const networkInfo = {\n      chainId: network.chainId,\n      chainName: network.name,\n      nativeCurrency: network.nativeCurrency,\n      rpcUrls: [network.rpcUrl],\n      blockExplorerUrls: [network.blockExplorerUrl]\n    }\n\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        network: {\n          add: networkInfo\n        }\n      })\n    })\n  }\n\n  // /**\n  //  * Retrieves the current account address.\n  //  */\n  getAccountAddress() {\n    return this.getAllAccounts().then((accounts) => {\n      return accounts[0] as `0x${string}`\n    })\n  }\n\n  // /**\n  //  * Switches to the network with the given name.\n  //  *\n  //  * @param networkName - The name of the network to switch to.\n  //  */\n  async switchNetwork(networkName: string) {\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        network: {\n          add: {\n            chainId: 1,\n            chainName: networkName,\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            rpcUrls: ['http://localhost:8545']\n          }\n        }\n      })\n    })\n  }\n\n  // /**\n  //  * Connects wallet to the dapp.\n  //  *\n  //  * @param wallet - The wallet to connect to the dapp.\n  //  */\n  async connectToDapp(wallet: WalletMock = 'metamask') {\n    this.wallet = wallet\n\n    cy.window().then((cypressWindow) => {\n      class WalletConnectStub {}\n\n      let connector: WalletConnectStub | undefined\n\n      if (wallet === 'walletconnect') {\n        connector = WalletConnectStub\n      }\n\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet,\n        accounts: { return: [ACCOUNT_MOCK] },\n        // @ts-ignore\n        connector\n      })\n    })\n  }\n}\n","// Wallet\nexport const SEED_PHRASE = 'test test test test test test test test test test test junk'\n\nexport const BLOCKCHAIN = 'ethereum'\n\nexport const ACCOUNT_MOCK = '0xd73b04b0e696b0945283defa3eee453814758f1a'\n\n// Anvil\nexport const ANVIL_CHAIN_ID = 31337\n\nexport const ANVIL_URL_URL = 'http://anvil:5000'\n","import type { Network } from './Network'\nimport type { WalletMock } from './WalletMock'\n\nexport abstract class EthereumWalletMockAbstract {\n  seedPhrase: string | undefined\n  wallet: WalletMock\n\n  protected constructor(wallet: WalletMock = 'metamask') {\n    this.wallet = wallet\n  }\n\n  /**\n   * Imports a wallet using the given seed phrase.\n   *\n   * @param seedPhrase - The seed phrase to import.\n   */\n  abstract importWallet(seedPhrase: string): void\n\n  /**\n   * Retrieves the current account address.\n   */\n  abstract getAllAccounts(): Cypress.Chainable<`0x${string}`[]> | Promise<`0x${string}`[] | undefined>\n\n  /**\n   * Adds a new account. This account is based on the initially imported seed phrase.\n   */\n  abstract addNewAccount(): void\n\n  /**\n   * Imports a wallet using the given private key.\n   *\n   * @param privateKey - The private key to import.\n   */\n  abstract importWalletFromPrivateKey(privateKey: `0x${string}`): void\n\n  /**\n   * Switches to the account with the given name.\n   *\n   * @param accountAddress - The name of the account to switch to.\n   */\n  abstract switchAccount(accountAddress: string): void\n\n  /**\n   * Adds a new network.\n   *\n   * @param network - The network object to use for adding the new network.\n   */\n  abstract addNetwork(network: Network): void\n\n  /**\n   * Retrieves the current account address.\n   */\n  abstract getAccountAddress(): Cypress.Chainable<`0x${string}`> | Promise<`0x${string}` | undefined>\n\n  /**\n   * Switches to the network with the given name.\n   *\n   * @param networkName - The name of the network to switch to.\n   */\n  abstract switchNetwork(networkName: string): void\n\n  /**\n   * Connects wallet to the dapp.\n   *\n   * @param wallet - The wallet to connect to the dapp.\n   */\n  abstract connectToDapp(wallet: WalletMock): void\n}\n"]}