import type { Anvil, CreateAnvilOptions } from '@viem/anvil';
import type { SettingsSidebarMenus } from '../../selectors/pages/HomePage/settings';
import type { GasSettings } from '../../type/GasSettings';
import type { Network } from '../../type/Network';
declare global {
    namespace Cypress {
        interface Chainable {
            importWallet(seedPhrase: string): Chainable<void>;
            importWalletFromPrivateKey(privateKey: string): Chainable<void>;
            getAccount(): Chainable<string>;
            getNetwork(): Chainable<string>;
            connectToDapp(accounts?: string[]): Chainable<void>;
            addNewAccount(accountName: string): Chainable<void>;
            switchAccount(accountName: string): Chainable<void>;
            renameAccount(currentAccountName: string, newAccountName: string): Chainable<void>;
            getAccountAddress(): Chainable<string>;
            resetAccount(): Chainable<void>;
            switchNetwork(networkName: string, isTestnet?: boolean): Chainable<void>;
            createAnvilNode(options?: CreateAnvilOptions): Chainable<{
                anvil: Anvil;
                rpcUrl: string;
                chainId: number;
            }>;
            connectToAnvil(): Chainable<void>;
            emptyAnvilNode(): Chainable<void>;
            addNetwork(network: Network): Chainable<void>;
            approveNewNetwork(): Chainable<void>;
            approveSwitchNetwork(): Chainable<void>;
            rejectNewNetwork(): Chainable<void>;
            rejectSwitchNetwork(): Chainable<void>;
            deployToken(): Chainable<void>;
            addNewToken(): Chainable<void>;
            approveTokenPermission(options?: {
                spendLimit?: number | 'max';
                gasSetting?: GasSettings;
            }): Chainable<void>;
            rejectTokenPermission(): Chainable<void>;
            providePublicEncryptionKey(): Chainable<void>;
            decrypt(): Chainable<void>;
            confirmSignature(): Chainable<void>;
            rejectSignature(): Chainable<void>;
            confirmTransaction(options?: {
                gasSetting?: GasSettings;
            }): Chainable<void>;
            rejectTransaction(): Chainable<void>;
            confirmTransactionAndWaitForMining(): Chainable<void>;
            openTransactionDetails(txIndex: number): Chainable<void>;
            closeTransactionDetails(): Chainable<void>;
            lock(): Chainable<void>;
            unlock(): Chainable<void>;
            toggleShowTestNetworks(): Chainable<void>;
            toggleDismissSecretRecoveryPhraseReminder(): Chainable<void>;
            goBackToHomePage(): Chainable<void>;
            openSettings(): Chainable<void>;
            openSidebarMenu(menu: SettingsSidebarMenus): Chainable<void>;
        }
    }
}
/**
 * Synpress Commands for MetaMask
 *
 * This module extends Cypress with custom commands for interacting with MetaMask and Ethereum networks.
 * It provides a wide range of functionalities including wallet management, account operations,
 * network interactions, token handling, transaction management, and MetaMask UI interactions.
 *
 * @module SynpressCommandsForMetaMask
 *
 * Key features:
 * - Wallet: Import wallet, connect to dApps
 * - Account: Add, switch, rename, reset accounts
 * - Network: Switch networks, create and manage Anvil nodes, add custom networks
 * - Tokens: Deploy tokens, add new tokens, approve token permissions
 * - Transactions: Confirm, reject, and view transaction details
 * - MetaMask UI: Lock/unlock, toggle settings, navigate UI
 *
 * These commands enhance the testing capabilities for Ethereum-based applications,
 * allowing for comprehensive end-to-end testing of dApps integrated with MetaMask.
 */
/**
 * Initializes Synpress commands for MetaMask
 */
export default function synpressCommandsForMetaMask(): void;
//# sourceMappingURL=synpressCommands.d.ts.map