{"version":3,"sources":["../../src/selectors/createDataTestSelector.ts","../../src/selectors/pages/HomePage/settings.ts","../../src/type/MetaMaskAbstract.ts","../../src/selectors/pages/OnboardingPage/analyticsPage.ts","../../src/selectors/pages/OnboardingPage/getStartedPage.ts","../../src/selectors/pages/OnboardingPage/pinExtensionPage.ts","../../src/selectors/pages/OnboardingPage/secretRecoveryPhrasePage.ts","../../src/selectors/pages/OnboardingPage/walletCreationSuccessPage.ts","../../src/selectors/pages/OnboardingPage/index.ts","../../src/playwright/pages/OnboardingPage/actions/importWallet.ts","../../src/selectors/pages/HomePage/index.ts","../../src/playwright/utils/waitFor.ts","../../src/selectors/loading/index.ts","../../src/selectors/error/index.ts","../../src/selectors/pages/CrashPage/index.ts","../../src/selectors/pages/LockPage/index.ts","../../src/selectors/pages/NotificationPage/actionFooter.ts","../../src/selectors/pages/NotificationPage/connectPage.ts","../../src/selectors/pages/NotificationPage/networkPage.ts","../../src/selectors/pages/NotificationPage/permissionPage.ts","../../src/selectors/pages/NotificationPage/signaturePage.ts","../../src/selectors/pages/NotificationPage/transactionPage.ts","../../src/selectors/pages/NotificationPage/index.ts","../../src/selectors/pages/SettingsPage/index.ts","../../src/playwright/utils/clickLocatorIfCondition.ts","../../src/playwright/pages/HomePage/actions/popups/closePopover.ts","../../src/playwright/pages/HomePage/actions/popups/closeRecoveryPhraseReminder.ts","../../src/playwright/pages/HomePage/actions/popups/closeNewNetworkInfoPopover.ts","../../src/playwright/pages/HomePage/actions/popups/closeNetworkAddedPopover.ts","../../src/playwright/pages/HomePage/actions/lock.ts","../../src/playwright/pages/HomePage/actions/importWalletFromPrivateKey.ts","../../src/playwright/utils/allTextContents.ts","../../src/playwright/pages/HomePage/actions/switchAccount.ts","../../src/playwright/utils/toggle.ts","../../src/playwright/pages/HomePage/actions/settings.ts","../../src/playwright/pages/HomePage/actions/switchNetwork.ts","../../src/type/Network.ts","../../src/playwright/pages/HomePage/actions/addNetwork.ts","../../src/playwright/pages/HomePage/actions/toggleShowTestNetworks.ts","../../src/playwright/pages/HomePage/actions/addNewAccount.ts","../../src/playwright/pages/HomePage/actions/transactionDetails.ts","../../src/playwright/pages/HomePage/actions/renameAccount.ts","../../src/playwright/pages/HomePage/actions/getAccountAddress.ts","../../src/playwright/pages/OnboardingPage/actions/helpers/confirmSecretRecoveryPhrase.ts","../../src/playwright/pages/OnboardingPage/actions/helpers/createPassword.ts","../../src/playwright/pages/OnboardingPage/page.ts","../../src/playwright/pages/CrashPage/page.ts","../../src/playwright/utils/waitForSpinnerToVanish.ts","../../src/playwright/pages/LockPage/actions/unlock.ts","../../src/playwright/pages/LockPage/page.ts","../../src/playwright/pages/HomePage/page.ts","../../src/playwright/utils/getNotificationPageAndWaitForLoad.ts","../../src/playwright/pages/NotificationPage/actions/connectToDapp.ts","../../src/playwright/pages/NotificationPage/actions/signSimpleMessage.ts","../../src/playwright/pages/NotificationPage/actions/signStructuredMessage.ts","../../src/type/GasSettings.ts","../../src/playwright/pages/NotificationPage/actions/transaction.ts","../../src/playwright/pages/NotificationPage/actions/approvePermission.ts","../../src/playwright/pages/NotificationPage/actions/network.ts","../../src/playwright/pages/NotificationPage/actions/token.ts","../../src/playwright/pages/NotificationPage/actions/encryption.ts","../../src/playwright/pages/NotificationPage/page.ts","../../src/playwright/pages/SettingsPage/actions/enableEthSign.ts","../../src/playwright/pages/SettingsPage/actions/disableEthSign.ts","../../src/playwright/pages/SettingsPage/page.ts","../../src/playwright/MetaMask.ts","../../src/playwright/fixtures/metaMaskFixtures.ts","../../src/prepareExtension.ts","../../src/playwright/fixture-actions/unlockForFixture.ts","../../src/playwright/fixture-actions/getExtensionId.ts","../../src/playwright/fixture-actions/persistLocalStorage.ts"],"names":["SettingsSidebarMenus","classes","resetAccount","advanced","settings","switchNetwork","z","addNetwork","network","StepSelectors","DEFAULT_TIMEOUT","signMessage","rejectMessage","gasSetting","path","fs","errors"],"mappings":"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","sourcesContent":["export const createDataTestSelector = (dataTestId: string) => {\n  if (dataTestId.includes(' ')) {\n    throw new Error('[CreateDataTestSelector] dataTestId cannot contain spaces')\n  }\n\n  return `[data-testid=\"${dataTestId}\"]`\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nexport enum SettingsSidebarMenus {\n  General = 1,\n  Advanced = 2\n\n  /// ---- Unused Selectors ----\n  // Contacts = 3,\n  // SecurityAndPrivacy = 4,\n  // Alerts = 5,\n  // Networks = 6,\n  // Experimental = 7,\n  // About = 8\n}\nconst sidebarMenu = (menu: SettingsSidebarMenus) =>\n  `.settings-page__content__tabs .tab-bar__tab.pointer:nth-of-type(${menu})`\n\nconst resetAccount = {\n  button: `${createDataTestSelector('advanced-setting-reset-account')} button`,\n  confirmButton: '.modal .modal-container__footer button.btn-danger-primary'\n}\n\nconst advanced = {\n  // locator(showTestNetworksToggle).nth(0) -> Show conversion on test networks\n  // locator(showTestNetworksToggle).nth(1) -> Show test networks\n  resetAccount,\n  showTestNetworksToggle: `${createDataTestSelector('advanced-setting-show-testnet-conversion')} .toggle-button`,\n  dismissSecretRecoveryPhraseReminderToggle: '.settings-page__content-row:nth-of-type(11) .toggle-button'\n}\n\nconst newNetworkFormContainer = '.networks-tab__add-network-form'\nconst newNetworkForm = {\n  networkNameInput: `${newNetworkFormContainer} .form-field:nth-child(1) input`,\n  rpcUrlInput: `${newNetworkFormContainer} .form-field:nth-child(2) input`,\n  rpcUrlError: `${newNetworkFormContainer} .form-field:nth-child(2) .form-field__error`,\n  chainIdInput: `${newNetworkFormContainer} .form-field:nth-child(3) input`,\n  chainIdError: `${newNetworkFormContainer} .form-field:nth-child(3) .form-field__error`,\n  symbolInput: `${createDataTestSelector('network-form-ticker')} input`,\n  symbolError: createDataTestSelector('network-form-ticker-warning'),\n  blockExplorerUrlInput: `${newNetworkFormContainer} .form-field:last-child input`,\n  saveButton: `${newNetworkFormContainer} .networks-tab__add-network-form-footer button.btn-primary`\n}\n\nconst networks = {\n  addNetworkManuallyButton: `${createDataTestSelector('add-network-manually')}`,\n  newNetworkForm\n}\n\nexport default {\n  SettingsSidebarMenus,\n  sidebarMenu,\n  advanced,\n  networks\n}\n","import { SettingsSidebarMenus } from '../selectors/pages/HomePage/settings'\nimport type { GasSettings } from './GasSettings'\nimport type { Network } from './Network'\n\nexport abstract class MetaMaskAbstract {\n  /**\n   * @param password - The password of the MetaMask wallet.\n   * @param extensionId - The extension ID of the MetaMask extension. Optional if no interaction with the dapp is required.\n   *\n   * @returns A new instance of the MetaMask class.\n   */\n  constructor(\n    /**\n     * The password of the MetaMask wallet.\n     */\n    readonly password: string,\n    /**\n     * The extension ID of the MetaMask extension. Optional if no interaction with the dapp is required.\n     */\n    readonly extensionId?: string\n  ) {\n    this.password = password\n    this.extensionId = extensionId\n  }\n\n  /**\n   * Imports a wallet using the given seed phrase.\n   *\n   * @param seedPhrase - The seed phrase to import.\n   */\n  abstract importWallet(seedPhrase: string): void\n\n  /**\n   * Adds a new account with the given name. This account is based on the initially imported seed phrase.\n   *\n   * @param accountName - The name of the new account.\n   */\n  abstract addNewAccount(accountName: string): void\n\n  /**\n   * Imports a wallet using the given private key.\n   *\n   * @param privateKey - The private key to import.\n   */\n  abstract importWalletFromPrivateKey(privateKey: string): void\n\n  /**\n   * Switches to the account with the given name.\n   *\n   * @param accountName - The name of the account to switch to.\n   */\n  abstract switchAccount(accountName: string): void\n\n  /**\n   * Adds a new network.\n   *\n   * @param network - The network object to use for adding the new network.\n   * @param network.name - The name of the network.\n   * @param network.rpcUrl - The RPC URL of the network.\n   * @param network.chainId - The chain ID of the network.\n   * @param network.symbol - The currency symbol of the network.\n   * @param network.blockExplorerUrl - The block explorer URL of the network.\n   */\n  abstract addNetwork(network: Network): void\n\n  /**\n   * Retrieves the current account address.\n   */\n  abstract getAccountAddress(): void\n\n  /**\n   * Switches to the network with the given name.\n   *\n   * @param networkName - The name of the network to switch to.\n   * @param isTestnet - If switch to a test network.\n   */\n  abstract switchNetwork(networkName: string, isTestnet: boolean): void\n\n  /**\n   * Connects to the dapp using the currently selected account.\n   */\n  abstract connectToDapp(accounts?: string[]): void\n\n  /**\n   * Locks MetaMask.\n   */\n  abstract lock(): void\n\n  /**\n   * Unlocks MetaMask.\n   */\n  abstract unlock(): void\n\n  /**\n   * Confirms a signature request. This function supports all types of commonly used signatures.\n   */\n  abstract confirmSignature(): void\n\n  /**\n   * Confirms a signature request with potential risk.\n   */\n  abstract confirmSignatureWithRisk(): void\n\n  /**\n   * Rejects a signature request. This function supports all types of commonly used signatures.\n   */\n  abstract rejectSignature(): void\n\n  /**\n   * Approves a new network request.\n   */\n  abstract approveNewNetwork(): void\n\n  /**\n   * Rejects a new network request.\n   */\n  abstract rejectNewNetwork(): void\n\n  /**\n   * Approves a switch network request.\n   */\n  abstract approveSwitchNetwork(): void\n\n  /**\n   * Rejects a switch network request.\n   */\n  abstract rejectSwitchNetwork(): void\n\n  /**\n   * Confirms a transaction request.\n   *\n   * @param options - The transaction options.\n   * @param options.gasSetting - The gas setting to use for the transaction.\n   */\n  abstract confirmTransaction(options?: { gasSetting?: GasSettings }): void\n\n  /**\n   * Rejects a transaction request.\n   */\n  abstract rejectTransaction(): void\n\n  /**\n   * Approves a permission request to spend tokens.\n   *\n   * ::: warning\n   * For NFT approvals, use `confirmTransaction` method.\n   * :::\n   *\n   * @param options - The permission options.\n   * @param options.spendLimit - The spend limit to use for the permission.\n   * @param options.gasSetting - The gas setting to use for the approval transaction.\n   */\n  abstract approveTokenPermission(options?: {\n    spendLimit?: 'max' | number\n    gasSetting?: GasSettings\n  }): void\n\n  /**\n   * Rejects a permission request to spend tokens.\n   *\n   * ::: warning\n   * For NFT approvals, use `confirmTransaction` method.\n   * :::\n   */\n  abstract rejectTokenPermission(): void\n\n  /**\n   * Goes back to the home page of MetaMask tab.\n   */\n  abstract goBackToHomePage(): void\n\n  /**\n   * Opens the settings page.\n   */\n  abstract openSettings(): void\n\n  /**\n   * Opens a given menu in the sidebar.\n   *\n   * @param menu - The menu to open.\n   */\n  abstract openSidebarMenu(menu: SettingsSidebarMenus): void\n  /**\n   * Toggles the \"Show Test Networks\" setting.\n   *\n   * ::: warning\n   * This function requires the correct menu to be already opened.\n   * :::\n   */\n  abstract toggleShowTestNetworks(): void\n\n  /**\n   * Toggles the \"Dismiss Secret Recovery Phrase Reminder\" setting.\n   *\n   * ::: warning\n   * This function requires the correct menu to be already opened.\n   * :::\n   */\n  abstract toggleDismissSecretRecoveryPhraseReminder(): void\n\n  /**\n   * Resets the account.\n   *\n   * ::: warning\n   * This function requires the correct menu to be already opened.\n   * :::\n   */\n  abstract resetAccount(): void\n\n  /**\n   * Enables the eth_sign feature in MetaMask advanced settings.\n   * This method is marked as unsafe because enabling eth_sign can have security implications.\n   */\n  abstract unsafe_enableEthSign(): void\n\n  /**\n   * Disables the eth_sign feature in MetaMask advanced settings.\n   */\n  abstract disableEthSign(): void\n\n  abstract addNewToken(): void\n\n  abstract providePublicEncryptionKey(): void\n\n  abstract decrypt(): void\n\n  /// -------------------------------------------\n  /// ---------- EXPERIMENTAL FEATURES ----------\n  /// -------------------------------------------\n\n  /**\n   * Confirms a transaction request and waits for the transaction to be mined.\n   * This function utilizes the \"Activity\" tab of the MetaMask tab.\n   *\n   * @param options - The transaction options.\n   * @param options.gasSetting - The gas setting to use for the transaction.\n   *\n   * @experimental\n   * @group Experimental Methods\n   */\n  abstract confirmTransactionAndWaitForMining(options?: {\n    gasSetting?: GasSettings\n  }): void\n\n  /**\n   * Opens the transaction details.\n   *\n   * @param txIndex - The index of the transaction in the \"Activity\" tab. Starts from `0`.\n   *\n   * @experimental\n   * @group Experimental Methods\n   */\n  abstract openTransactionDetails(txIndex: number): void\n\n  /**\n   * Closes the currently opened transaction details.\n   *\n   * @experimental\n   * @group Experimental Methods\n   */\n  abstract closeTransactionDetails(): void\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nexport default {\n  optIn: createDataTestSelector('metametrics-i-agree'),\n  optOut: createDataTestSelector('metametrics-no-thanks')\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nexport default {\n  termsOfServiceCheckbox: createDataTestSelector('onboarding-terms-checkbox'),\n  createNewWallet: createDataTestSelector('onboarding-create-wallet'),\n  importWallet: createDataTestSelector('onboarding-import-wallet')\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nexport default {\n  nextButton: createDataTestSelector('pin-extension-next'),\n  confirmButton: createDataTestSelector('pin-extension-done')\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nconst recoveryStep = {\n  selectNumberOfWordsDropdown: '.import-srp__number-of-words-dropdown > .dropdown__select',\n  selectNumberOfWordsOption: (option: number | string) => `${option}`,\n  secretRecoveryPhraseWord: (index: number) => createDataTestSelector(`import-srp__srp-word-${index}`),\n  confirmSecretRecoveryPhraseButton: createDataTestSelector('import-srp-confirm'),\n  error: '.mm-banner-alert.import-srp__srp-error div'\n}\n\nconst passwordStep = {\n  passwordInput: createDataTestSelector('create-password-new'),\n  confirmPasswordInput: createDataTestSelector('create-password-confirm'),\n  acceptTermsCheckbox: createDataTestSelector('create-password-terms'),\n  importWalletButton: createDataTestSelector('create-password-import'),\n  error: `${createDataTestSelector('create-password-new')} + h6 > span > span`\n}\n\nexport default {\n  recoveryStep,\n  passwordStep\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nexport default {\n  confirmButton: createDataTestSelector('onboarding-complete-done')\n}\n","import AnalyticsPageSelectors from './analyticsPage'\nimport GetStartedPageSelectors from './getStartedPage'\nimport PinExtensionPageSelectors from './pinExtensionPage'\nimport SecretRecoveryPhrasePageSelectors from './secretRecoveryPhrasePage'\nimport WalletCreationSuccessPageSelectors from './walletCreationSuccessPage'\n\n// biome-ignore format: empty lines should be preserved\nexport default {\n  // Initial Welcome Page\n  GetStartedPageSelectors,\n\n  // 2nd Page\n  AnalyticsPageSelectors,\n\n  // 3rd Page with two steps:\n  // - Input Secret Recovery Phrase\n  // - Create Password\n  SecretRecoveryPhrasePageSelectors,\n\n  // 4th Page\n  WalletCreationSuccessPageSelectors,\n\n  // 5th Page\n  PinExtensionPageSelectors,\n};\n","import assert from 'node:assert'\nimport type { Page } from '@playwright/test'\n\nimport HomePageSelectors from '../../../../selectors/pages/HomePage'\nimport Selectors from '../../../../selectors/pages/OnboardingPage'\n\nimport { closePopover } from '../../HomePage/actions'\nimport { confirmSecretRecoveryPhrase, createPassword } from './helpers'\n\nexport async function importWallet(page: Page, seedPhrase: string, password: string) {\n  await page.locator(Selectors.GetStartedPageSelectors.termsOfServiceCheckbox).click()\n  await page.locator(Selectors.GetStartedPageSelectors.importWallet).click()\n\n  await page.locator(Selectors.AnalyticsPageSelectors.optOut).click()\n\n  // Secret Recovery Phrase Page\n  await confirmSecretRecoveryPhrase(page, seedPhrase)\n  await createPassword(page, password)\n\n  await page.locator(Selectors.WalletCreationSuccessPageSelectors.confirmButton).click()\n\n  await page.locator(Selectors.PinExtensionPageSelectors.nextButton).click()\n  await page.locator(Selectors.PinExtensionPageSelectors.confirmButton).click()\n\n  await closePopover(page)\n\n  await verifyImportedWallet(page)\n}\n\n// Checks if the wallet was imported successfully.\n// On rare occasions, the MetaMask hangs during the onboarding process.\nasync function verifyImportedWallet(page: Page) {\n  const accountAddress = await page.locator(HomePageSelectors.copyAccountAddressButton).textContent()\n\n  assert.strictEqual(\n    accountAddress?.startsWith('0x'),\n    true,\n    new Error(\n      [\n        `Incorrect state after importing the seed phrase. Account address is expected to start with \"0x\", but got \"${accountAddress}\" instead.`,\n        'Note: Try to re-run the cache creation. This is a known but rare error where MetaMask hangs during the onboarding process. If it persists, please file an issue on GitHub.'\n      ].join('\\n')\n    )\n  )\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\nimport settings from './settings'\n\nconst accountMenuContainer = '.multichain-account-menu-popover'\n\nconst addNewAccountMenu = {\n  accountNameInput: `${accountMenuContainer} input`,\n  createButton: `${accountMenuContainer} button.mm-button-primary`\n}\n\nconst renameAccountMenu = {\n  listItemButton: `${accountMenuContainer} ${createDataTestSelector('account-list-item-menu-button')}`,\n  renameButton: `${createDataTestSelector('editable-label-button')}`,\n  confirmRenameButton: 'div.editable-label button.mm-button-icon',\n  renameInput: '.mm-text-field .mm-box--padding-right-4'\n}\n\nconst importAccountMenu = {\n  privateKeyInput: `${accountMenuContainer} input#private-key-box`,\n  importButton: `${accountMenuContainer} ${createDataTestSelector('import-account-confirm-button')}`,\n  error: `${accountMenuContainer} p.mm-form-text-field__help-text`\n}\n\nconst addAccountMenu = {\n  addAccountButton: `${accountMenuContainer} ${createDataTestSelector(\n    'multichain-account-menu-popover-action-button'\n  )}`,\n  addNewAccountButton: `${accountMenuContainer} ${createDataTestSelector(\n    'multichain-account-menu-popover-add-account'\n  )}`,\n  importAccountButton: `${accountMenuContainer} div.mm-box.mm-box--padding-4:nth-child(2) > div.mm-box:nth-child(2) > button`,\n  addNewAccountMenu,\n  importAccountMenu\n}\n\nconst accountMenu = {\n  accountButton: createDataTestSelector('account-menu-icon'),\n  accountNames: `${accountMenuContainer} .multichain-account-menu-popover__list .multichain-account-list-item__account-name__button`,\n  addAccountMenu,\n  renameAccountMenu\n}\n\nconst threeDotsMenu = {\n  threeDotsButton: createDataTestSelector('account-options-menu-button'),\n  settingsButton: createDataTestSelector('global-menu-settings'),\n  lockButton: createDataTestSelector('global-menu-lock'),\n  accountDetailsButton: createDataTestSelector('account-list-menu-details'),\n  accountDetailsCloseButton: '.mm-modal-content .mm-modal-header button.mm-button-icon.mm-button-icon--size-sm'\n}\n\nconst popoverContainer = '.popover-container'\nconst popover = {\n  closeButton: `${popoverContainer} ${createDataTestSelector('popover-close')}`\n}\n\nconst networkAddedPopover = {\n  switchToNetworkButton: '.home__new-network-added__switch-to-button',\n  dismissButton: '.home__new-network-added button.btn-secondary',\n  switchCompleteCloseButton: '.popover-header .box.popover-header__title button.mm-box.mm-button-icon'\n}\n\nconst newNetworkInfoPopover = {\n  gotItButton: '.new-network-info__wrapper button.btn-primary'\n}\n\nconst recoveryPhraseReminder = {\n  gotItButton: '.recovery-phrase-reminder button.btn-primary'\n}\n\nconst networkDropdownContainer = '.multichain-network-list-menu-content-wrapper'\nconst networkDropdown = {\n  dropdownButton: createDataTestSelector('network-display'),\n  closeDropdownButton: `${networkDropdownContainer} > section > div:nth-child(1) button`,\n  networksList: `${networkDropdownContainer} .multichain-network-list-menu`,\n  networks: `${networkDropdownContainer} .multichain-network-list-item p`,\n  showTestNetworksToggle: `${networkDropdownContainer} > section > div > label.toggle-button`,\n  addNetworkButton: `${networkDropdownContainer} div.mm-box.mm-box--padding-4 > button`,\n  toggleOff: `${networkDropdownContainer} label.toggle-button.toggle-button--off`,\n  toggleOn: `${networkDropdownContainer} label.toggle-button.toggle-button--on`,\n  closeNetworkPopupButton:\n    '.mm-modal-header button.mm-button-icon.mm-box--color-icon-default.mm-box--background-color-transparent.mm-box--rounded-lg'\n}\n\nconst tabContainer = '.tabs__content'\nconst activityTab = {\n  activityTabButton: `${createDataTestSelector('home__activity-tab')}`,\n  transactionsList: `${tabContainer} .transaction-list__transactions`,\n  pendingQueuedTransactions: `${tabContainer} .transaction-list__pending-transactions .transaction-list-item .transaction-status-label--queued`,\n  pendingUnapprovedTransactions: `${tabContainer} .transaction-list__pending-transactions .transaction-list-item .transaction-status-label--unapproved`,\n  pendingApprovedTransactions: `${tabContainer} .transaction-list__pending-transactions .transaction-list-item .transaction-status-label--pending`,\n  completedTransactions: `${tabContainer} .transaction-list__completed-transactions .transaction-list-item`\n}\n\nconst singleToken = '.multichain-token-list-item'\n\nexport default {\n  logo: `button${createDataTestSelector('app-header-logo')}`,\n  copyAccountAddressButton: createDataTestSelector('address-copy-button-text'),\n  currentNetwork: `${createDataTestSelector('network-display')} span:nth-of-type(1)`,\n  threeDotsMenu,\n  settings,\n  activityTab,\n  networkDropdown,\n  accountMenu,\n  recoveryPhraseReminder,\n  popover,\n  networkAddedPopover,\n  newNetworkInfoPopover,\n  portfolio: {\n    singleToken\n  }\n}\n","import type { Page } from '@playwright/test'\nimport { errors } from '@playwright/test'\nimport { LoadingSelectors } from '../../selectors'\nimport { ErrorSelectors } from '../../selectors'\n\nconst DEFAULT_TIMEOUT = 2000\n\nexport const waitUntilStable = async (page: Page) => {\n  await page.waitForLoadState('domcontentloaded')\n  await page.waitForLoadState('networkidle')\n}\n\nexport const waitForSelector = async (selector: string, page: Page, timeout: number) => {\n  await waitUntilStable(page)\n\n  try {\n    await page.waitForSelector(selector, { state: 'hidden', timeout })\n  } catch (error) {\n    if (error instanceof errors.TimeoutError) {\n      console.log(`Loading indicator '${selector}' not found - continuing.`)\n    } else {\n      console.log(`Error while waiting for loading indicator '${selector}' to disappear`)\n      throw error\n    }\n  }\n}\n\nexport const waitForMetaMaskLoad = async (page: Page) => {\n  await Promise.all(\n    LoadingSelectors.loadingIndicators.map(async (selector) => {\n      await waitForSelector(selector, page, DEFAULT_TIMEOUT)\n    })\n  )\n    .then(() => {\n      return true\n    })\n    .catch((error) => {\n      console.error('Error: ', error)\n    })\n\n  return page\n}\n\nexport const waitForMetaMaskWindowToBeStable = async (page: Page) => {\n  await waitForMetaMaskLoad(page)\n  if ((await page.locator(ErrorSelectors.loadingOverlayErrorButtons).count()) > 0) {\n    const retryButton = await page.locator(ErrorSelectors.loadingOverlayErrorButtonsRetryButton)\n    await retryButton.click()\n    await waitForSelector(LoadingSelectors.loadingOverlay, page, DEFAULT_TIMEOUT)\n  }\n  await fixCriticalError(page)\n}\n\nexport const fixCriticalError = async (page: Page) => {\n  for (let times = 0; times < 5; times++) {\n    if ((await page.locator(ErrorSelectors.criticalError).count()) > 0) {\n      console.log('[fixCriticalError] Metamask crashed with critical error, refreshing..')\n      if (times <= 3) {\n        await page.reload()\n        await waitForMetaMaskWindowToBeStable(page)\n      } else if (times === 4) {\n        const restartButton = await page.locator(ErrorSelectors.criticalErrorRestartButton)\n        await restartButton.click()\n        await waitForMetaMaskWindowToBeStable(page)\n      } else {\n        throw new Error('[fixCriticalError] Max amount of retries to fix critical metamask error has been reached.')\n      }\n    } else if ((await page.locator(ErrorSelectors.errorPage).count()) > 0) {\n      console.log('[fixCriticalError] Metamask crashed with error, refreshing..')\n      if (times <= 4) {\n        await page.reload()\n        await waitForMetaMaskWindowToBeStable(page)\n      } else {\n        throw new Error('[fixCriticalError] Max amount of retries to fix critical metamask error has been reached.')\n      }\n    } else {\n      break\n    }\n  }\n}\n\n// Inlining the sleep function here cause this is one of the few places in the entire codebase where sleep should be used!\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n\nconst timeouts = [0, 20, 50, 100, 100, 500] as const\n\n// TODO: Box this function.\n// This functions mimics the one found in Playwright with a few small differences.\n// Custom implementation is needed because Playwright lists errors in the report even if they are caught.\nexport async function waitFor(action: () => Promise<boolean>, timeout: number, shouldThrow = true) {\n  let timeoutsSum = 0\n  let timeoutIndex = 0\n\n  let reachedTimeout = false\n\n  while (!reachedTimeout) {\n    let nextTimeout = timeouts.at(Math.min(timeoutIndex++, timeouts.length - 1)) as number\n\n    if (timeoutsSum + nextTimeout > timeout) {\n      nextTimeout = timeout - timeoutsSum\n      reachedTimeout = true\n    } else {\n      timeoutsSum += nextTimeout\n    }\n\n    await sleep(nextTimeout)\n\n    const result = await action()\n    if (result) {\n      return result\n    }\n  }\n\n  if (shouldThrow) {\n    throw new Error(`Timeout ${timeout}ms exceeded.`)\n  }\n\n  return false\n}\n","export const LoadingSelectors = {\n  spinner: '.spinner',\n  loadingOverlay: '.loading-overlay',\n  loadingIndicators: [\n    '.loading-logo',\n    '.loading-spinner',\n    '.loading-overlay',\n    '.loading-overlay__spinner',\n    '.loading-span',\n    '.loading-indicator',\n    '#loading__logo',\n    '#loading__spinner',\n    '.mm-button-base__icon-loading',\n    '.loading-swaps-quotes',\n    '.loading-heartbeat'\n  ]\n}\n","export const ErrorSelectors = {\n  loadingOverlayErrorButtons: '.loading-overlay__error-buttons',\n  loadingOverlayErrorButtonsRetryButton: '.loading-overlay__error-buttons .btn-primary',\n  criticalError: '.critical-error',\n  criticalErrorRestartButton: '#critical-error-button',\n  errorPage: '.error-page'\n}\n","const container = 'section.error-page'\n\nexport default {\n  header: `${container} > .error-page__header`,\n  errors: `${container} > .error-page__details li`\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nexport default {\n  passwordInput: createDataTestSelector('unlock-password'),\n  submitButton: createDataTestSelector('unlock-submit')\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nexport default {\n  confirmActionButton: `.page-container__footer ${createDataTestSelector('page-container-footer-next')}`,\n  rejectActionButton: `.page-container__footer ${createDataTestSelector('page-container-footer-cancel')}`\n}\n","export default {\n  accountOption: '.choose-account-list .choose-account-list__list .choose-account-list__account',\n  accountCheckbox: 'input.choose-account-list__list-check-box'\n}\n","const addNetwork = {\n  approveButton: '.confirmation-footer__actions button.btn-primary',\n  cancelButton: '.confirmation-footer__actions button.btn-secondary'\n}\n\nconst switchNetwork = {\n  switchNetworkButton: '.confirmation-footer__actions button.btn-primary',\n  cancelButton: '.confirmation-footer__actions button.btn-secondary'\n}\n\nexport default {\n  addNetwork,\n  switchNetwork\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nconst approve = {\n  maxButton: createDataTestSelector('custom-spending-cap-max-button'),\n  customSpendingCapInput: createDataTestSelector('custom-spending-cap-input')\n}\n\nexport default {\n  approve\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nconst simpleMessage = {\n  signButton: `.request-signature__footer ${createDataTestSelector('request-signature__sign')}`,\n  rejectButton: '.request-signature__footer button.btn-secondary'\n}\n\nconst structuredMessage = {\n  scrollDownButton: `.signature-request-message ${createDataTestSelector('signature-request-scroll-button')}`,\n  signButton: `.signature-request-footer ${createDataTestSelector('signature-sign-button')}`,\n  rejectButton: `.signature-request-footer ${createDataTestSelector('signature-cancel-button')}`\n}\n\nconst riskModal = {\n  signButton: createDataTestSelector('signature-warning-sign-button')\n}\n\nexport default {\n  simpleMessage,\n  structuredMessage,\n  riskModal\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nconst advancedGasFeeMenu = {\n  maxBaseFeeInput: createDataTestSelector('base-fee-input'),\n  priorityFeeInput: createDataTestSelector('priority-fee-input'),\n  gasLimitEditButton: createDataTestSelector('advanced-gas-fee-edit'),\n  gasLimitInput: createDataTestSelector('gas-limit-input'),\n  gasLimitError: `div:has(> ${createDataTestSelector('gas-limit-input')}) + .form-field__error`,\n  saveButton: '.popover-footer > button.btn-primary'\n}\n\nconst lowGasFee = {\n  button: createDataTestSelector('edit-gas-fee-item-low'),\n  maxFee: `${createDataTestSelector('edit-gas-fee-item-low')} .edit-gas-item__fee-estimate`\n}\n\nconst marketGasFee = {\n  button: createDataTestSelector('edit-gas-fee-item-medium'),\n  maxFee: `${createDataTestSelector('edit-gas-fee-item-medium')} .edit-gas-item__fee-estimate`\n}\n\nconst aggressiveGasFee = {\n  button: createDataTestSelector('edit-gas-fee-item-high'),\n  maxFee: `${createDataTestSelector('edit-gas-fee-item-high')} .edit-gas-item__fee-estimate`\n}\n\nconst editGasFeeMenu = {\n  editGasFeeButton: createDataTestSelector('edit-gas-fee-icon'),\n  editGasFeeButtonToolTip: '.edit-gas-fee-button .info-tooltip',\n  lowGasFee,\n  marketGasFee,\n  aggressiveGasFee,\n  siteSuggestedGasFeeButton: createDataTestSelector('edit-gas-fee-item-dappSuggested'),\n  advancedGasFeeButton: createDataTestSelector('edit-gas-fee-item-custom'),\n  advancedGasFeeMenu\n}\n\nconst nftApproveAllConfirmationPopup = {\n  approveButton: '.set-approval-for-all-warning__content button.set-approval-for-all-warning__footer__approve-button'\n}\n\nexport default {\n  editGasFeeMenu,\n  nftApproveAllConfirmationPopup\n}\n","import ActionFooter from './actionFooter'\nimport ConnectPage from './connectPage'\nimport NetworkPage from './networkPage'\nimport PermissionPage from './permissionPage'\nimport SignaturePage from './signaturePage'\nimport TransactionPage from './transactionPage'\n\nexport default {\n  ActionFooter,\n  ConnectPage,\n  SignaturePage,\n  NetworkPage,\n  PermissionPage,\n  TransactionPage\n}\n","import { createDataTestSelector } from '../../createDataTestSelector'\n\nconst menuOption = '.settings-page__content__tabs .tab-bar .tab-bar__tab'\n\nconst settings = {\n  menuOption,\n  advancedSettings: `${menuOption}:nth-child(2)`,\n  ethSignToggle: `${createDataTestSelector('advanced-setting-toggle-ethsign')} .eth-sign-toggle`,\n  ethSignWarning:\n    '.settings-page__content-row .mm-banner-alert.mm-banner-alert--severity-danger.mm-box--background-color-error-muted'\n}\n\nconst confirmationModal = {\n  confirmationCheckbox: createDataTestSelector('eth-sign__checkbox'),\n  continueButton: '.modal__content button.mm-button-primary',\n  manualConfirmationInput: '#enter-eth-sign-text',\n  enableButton: '.modal__content button.mm-button-primary.mm-button-primary--type-danger'\n}\n\nexport default {\n  settings,\n  confirmationModal\n}\n","import type { Locator } from '@playwright/test'\nimport { waitFor } from './waitFor'\n\n// TODO: Extract & make configurable\nexport async function clickLocatorIfCondition(locator: Locator, condition: () => Promise<boolean>, timeout = 3_000) {\n  const shouldClick = await waitFor(condition, timeout, false)\n  if (shouldClick) {\n    await locator.click()\n  }\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../../selectors/pages/HomePage'\nimport { clickLocatorIfCondition } from '../../../../utils/clickLocatorIfCondition'\n\n// Closes the popover with news, rainbows, unicorns, and other stuff.\nexport async function closePopover(page: Page) {\n  // We're using `first()` here just in case there are multiple popovers, which happens sometimes.\n  const closeButtonLocator = page.locator(Selectors.popover.closeButton).first()\n\n  // TODO: Extract & make configurable\n  await clickLocatorIfCondition(closeButtonLocator, () => closeButtonLocator.isVisible(), 1_000)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../../selectors/pages/HomePage'\nimport { clickLocatorIfCondition } from '../../../../utils/clickLocatorIfCondition'\n\nexport async function closeRecoveryPhraseReminder(page: Page) {\n  const closeButtonLocator = page.locator(Selectors.recoveryPhraseReminder.gotItButton)\n\n  // TODO: Extract & make configurable\n  await clickLocatorIfCondition(closeButtonLocator, () => closeButtonLocator.isVisible(), 1_000)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../../selectors/pages/HomePage'\nimport { clickLocatorIfCondition } from '../../../../utils/clickLocatorIfCondition'\n\nexport async function closeNewNetworkInfoPopover(page: Page) {\n  const gotItButtonLocator = page.locator(Selectors.newNetworkInfoPopover.gotItButton)\n\n  // TODO: Extract & make configurable\n  await clickLocatorIfCondition(gotItButtonLocator, () => gotItButtonLocator.isVisible(), 1_000)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../../selectors/pages/HomePage'\nimport { clickLocatorIfCondition } from '../../../../utils/clickLocatorIfCondition'\n\n// Note: The \"Dismiss\" button does NOTHING and the network is ALWAYS automatically switched.\nexport async function closeNetworkAddedPopover(page: Page) {\n  const switchNetworkButtonLocator = page.locator(Selectors.networkAddedPopover.switchToNetworkButton)\n\n  // TODO: Extract & make configurable\n  await clickLocatorIfCondition(switchNetworkButtonLocator, () => switchNetworkButtonLocator.isVisible(), 1_000)\n\n  const switchCompleteCloseButtonLocator = page.locator(Selectors.networkAddedPopover.switchCompleteCloseButton)\n\n  await clickLocatorIfCondition(\n    switchCompleteCloseButtonLocator,\n    () => switchCompleteCloseButtonLocator.isVisible(),\n    1_000\n  )\n}\n","import type { Page } from '@playwright/test'\n\nimport Selectors from '../../../../selectors/pages/HomePage'\n\nexport async function lock(page: Page) {\n  await page.locator(Selectors.threeDotsMenu.threeDotsButton).click()\n  await page.locator(Selectors.threeDotsMenu.lockButton).click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\nimport { waitFor } from '../../../utils/waitFor'\n\nexport async function importWalletFromPrivateKey(page: Page, privateKey: string) {\n  await page.locator(Selectors.accountMenu.accountButton).click()\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.addAccountButton).click()\n  await page.locator(Selectors.accountMenu.addAccountMenu.importAccountButton).click()\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.importAccountMenu.privateKeyInput).fill(privateKey)\n\n  const importButton = page.locator(Selectors.accountMenu.addAccountMenu.importAccountMenu.importButton)\n  await importButton.click()\n\n  // TODO: Extract & make configurable\n  const isImportButtonHidden = await waitFor(() => importButton.isHidden(), 1_000, false)\n\n  if (!isImportButtonHidden) {\n    const errorText = await page.locator(Selectors.accountMenu.addAccountMenu.importAccountMenu.error).textContent({\n      timeout: 1_000 // TODO: Extract & make configurable\n    })\n\n    throw new Error(`[ImportWalletFromPrivateKey] Importing failed due to error: ${errorText}`)\n  }\n}\n","import type { Locator } from '@playwright/test'\nimport { z } from 'zod'\n\n// Custom implementation of `locator.allTextContents()` that is not utilizing `.map` which is not accessible under MetaMask's scuttling mode.\nexport async function allTextContents(locators: Locator[]) {\n  const names = await Promise.all(locators.map((locator) => locator.textContent()))\n\n  // We're making sure that the return type is `string[]` same as `locator.allTextContents()`.\n  return names.map((name) => z.string().parse(name))\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\nimport { allTextContents } from '../../../utils/allTextContents'\n\nexport async function switchAccount(page: Page, accountName: string) {\n  await page.locator(Selectors.accountMenu.accountButton).click()\n\n  const accountNamesLocators = await page.locator(Selectors.accountMenu.accountNames).all()\n\n  const accountNames = await allTextContents(accountNamesLocators)\n\n  const seekedAccountNames = accountNames.filter((name) => name.toLocaleLowerCase() === accountName.toLocaleLowerCase())\n\n  if (seekedAccountNames.length === 0) {\n    throw new Error(`[SwitchAccount] Account with name ${accountName} not found`)\n  }\n\n  // biome-ignore lint/style/noNonNullAssertion: this non-null assertion is intentional\n  const accountIndex = accountNames.indexOf(seekedAccountNames[0]!) // TODO: handle the undefined here better\n\n  // biome-ignore lint/style/noNonNullAssertion: this non-null assertion is intentional\n  await accountNamesLocators[accountIndex]!.click() // TODO: handle the undefined here better\n}\n","import type { Locator } from '@playwright/test'\nimport { waitFor } from './waitFor'\n\nexport async function toggle(toggleLocator: Locator) {\n  // TODO: Extract timeout\n  const classes = await toggleLocator.getAttribute('class', { timeout: 3_000 })\n\n  if (!classes) {\n    throw new Error('[ToggleShowTestNetworks] Toggle class returned null')\n  }\n\n  const isOn = classes.includes('toggle-button--on')\n\n  await toggleLocator.click()\n\n  const waitForAction = async () => {\n    const classes = await toggleLocator.getAttribute('class')\n\n    if (!classes) {\n      throw new Error('[ToggleShowTestNetworks] Toggle class returned null inside waitFor')\n    }\n\n    if (isOn) {\n      return classes.includes('toggle-button--off')\n    }\n\n    return classes.includes('toggle-button--on')\n  }\n\n  // TODO: Extract timeout\n  await waitFor(waitForAction, 3_000, true)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\nimport type { SettingsSidebarMenus } from '../../../../selectors/pages/HomePage/settings'\nimport { toggle } from '../../../utils/toggle'\n\nasync function openSettings(page: Page) {\n  await page.locator(Selectors.threeDotsMenu.threeDotsButton).click()\n  await page.locator(Selectors.threeDotsMenu.settingsButton).click()\n}\n\nasync function openSidebarMenu(page: Page, menu: SettingsSidebarMenus) {\n  await page.locator(Selectors.settings.sidebarMenu(menu)).click()\n}\n\nasync function resetAccount(page: Page) {\n  const buttonSelector = `[data-testid=\"advanced-setting-reset-account\"] button`\n  const confirmButtonSelector = '.modal .modal-container__footer button.btn-danger-primary'\n\n  await page.locator(buttonSelector).click()\n  await page.locator(confirmButtonSelector).click()\n}\n\nasync function toggleDismissSecretRecoveryPhraseReminder(page: Page) {\n  const toggleLocator = page.locator(Selectors.settings.advanced.dismissSecretRecoveryPhraseReminderToggle)\n  await toggle(toggleLocator)\n}\n\nconst advanced = {\n  resetAccount,\n  toggleDismissSecretRecoveryPhraseReminder\n}\n\nexport const settings = {\n  openSettings,\n  openSidebarMenu,\n  advanced\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\nimport { allTextContents } from '../../../utils/allTextContents'\nimport { closeRecoveryPhraseReminder } from './popups'\n\nasync function openTestnetSection(page: Page) {\n  const toggleButtonLocator = page.locator(Selectors.networkDropdown.showTestNetworksToggle)\n  const classes = await toggleButtonLocator.getAttribute('class')\n  if (classes?.includes('toggle-button--off')) {\n    await toggleButtonLocator.click()\n    await page.locator(Selectors.networkDropdown.toggleOn).isChecked()\n  }\n}\n\nexport async function switchNetwork(page: Page, networkName: string, includeTestNetworks: boolean) {\n  await page.locator(Selectors.networkDropdown.dropdownButton).click()\n\n  if (includeTestNetworks) {\n    await openTestnetSection(page)\n  }\n\n  const networkLocators = await page.locator(Selectors.networkDropdown.networks).all()\n  const networkNames = await allTextContents(networkLocators)\n\n  const seekedNetworkNameIndex = networkNames.findIndex(\n    (name) => name.toLocaleLowerCase() === networkName.toLocaleLowerCase()\n  )\n\n  const seekedNetworkLocator = seekedNetworkNameIndex >= 0 && networkLocators[seekedNetworkNameIndex]\n\n  if (!seekedNetworkLocator) {\n    throw new Error(`[SwitchNetwork] Network with name ${networkName} not found`)\n  }\n\n  await seekedNetworkLocator.click()\n\n  // TODO: This is not really needed if we do `metamask.toggleDismissSecretRecoveryPhraseReminder()` by default. Figure this out!\n  await closeRecoveryPhraseReminder(page)\n}\n","import { z } from 'zod'\n\nexport const NetworkValidation = z.object({\n  name: z.string(),\n  rpcUrl: z.string(),\n  chainId: z.number(),\n  symbol: z.string(),\n  blockExplorerUrl: z.string().optional()\n})\n\nexport type Network = z.infer<typeof NetworkValidation>\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\nimport { type Network, NetworkValidation } from '../../../../type/Network'\nimport { waitFor } from '../../../utils/waitFor'\nimport { closeNetworkAddedPopover, closeNewNetworkInfoPopover } from './popups'\n\nexport async function addNetwork(page: Page, network: Network) {\n  const { name, rpcUrl, chainId, symbol, blockExplorerUrl } = NetworkValidation.parse(network)\n\n  await page.locator(Selectors.networkDropdown.dropdownButton).click()\n  await page.locator(Selectors.networkDropdown.addNetworkButton).click()\n\n  await page.locator(Selectors.settings.networks.addNetworkManuallyButton).click()\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.networkNameInput).fill(name)\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.rpcUrlInput).fill(rpcUrl)\n\n  // We have to wait for the RPC URL error to appear.\n  const rpcUrlErrorLocator = page.locator(Selectors.settings.networks.newNetworkForm.rpcUrlError)\n  if (await waitFor(() => rpcUrlErrorLocator.isVisible(), 1_000, false)) {\n    const rpcUrlErrorText = await rpcUrlErrorLocator.textContent({\n      timeout: 1_000\n    })\n    throw new Error(`[AddNetwork] RPC URL error: ${rpcUrlErrorText}`)\n  }\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.chainIdInput).fill(chainId.toString())\n\n  // We have to wait for the Chain ID error to appear.\n  const chainIdErrorLocator = page.locator(Selectors.settings.networks.newNetworkForm.chainIdError)\n  if (await waitFor(() => chainIdErrorLocator.isVisible(), 1_000, false)) {\n    const chainIdErrorText = await chainIdErrorLocator.textContent({\n      timeout: 1_000\n    })\n    throw new Error(`[AddNetwork] Chain ID error: ${chainIdErrorText}`)\n  }\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.symbolInput).fill(symbol)\n\n  await waitFor(\n    async () => page.locator(Selectors.settings.networks.newNetworkForm.symbolError).isVisible(),\n    1_000,\n    false\n  )\n\n  if (blockExplorerUrl) {\n    await page.locator(Selectors.settings.networks.newNetworkForm.blockExplorerUrlInput).fill(blockExplorerUrl)\n  }\n\n  await page.locator(Selectors.settings.networks.newNetworkForm.saveButton).click()\n\n  await closeNetworkAddedPopover(page)\n\n  await closeNewNetworkInfoPopover(page)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\nimport { toggle } from '../../../utils/toggle'\n\n// Toggling this through the network dropdown instead of the settings page is a better approach.\n// This is in most cases the faster approach, but it's also more reliable.\nexport async function toggleShowTestNetworks(page: Page) {\n  await page.locator(Selectors.networkDropdown.dropdownButton).click()\n\n  await toggle(page.locator(Selectors.networkDropdown.showTestNetworksToggle))\n\n  await page.locator(Selectors.networkDropdown.closeNetworkPopupButton).click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\n\nexport async function addNewAccount(page: Page, accountName: string) {\n  // TODO: Use zod to validate this.\n  if (accountName.length === 0) {\n    throw new Error('[AddNewAccount] Account name cannot be an empty string')\n  }\n\n  await page.locator(Selectors.accountMenu.accountButton).click()\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.addAccountButton).click()\n  await page.locator(Selectors.accountMenu.addAccountMenu.addNewAccountButton).click()\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.addNewAccountMenu.accountNameInput).fill(accountName)\n\n  await page.locator(Selectors.accountMenu.addAccountMenu.addNewAccountMenu.createButton).click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\nimport { waitFor } from '../../../utils/waitFor'\n\nconst openTransactionDetails = async (page: Page, txIndex: number) => {\n  await page.locator(Selectors.activityTab.activityTabButton).click()\n\n  const visibleTxs = await page.locator(Selectors.activityTab.completedTransactions).count()\n\n  if (txIndex >= visibleTxs) {\n    throw new Error(\n      `[OpenTransactionDetails] Transaction with index ${txIndex} is not visible. There are only ${visibleTxs} transactions visible.`\n    )\n  }\n\n  await page.locator(Selectors.activityTab.completedTransactions).nth(txIndex).click()\n\n  // TODO: Extract timeout.\n  await waitFor(() => page.locator(Selectors.popover.closeButton).isVisible(), 3_000)\n}\n\nconst closeTransactionDetails = async (page: Page) => {\n  await page.locator(Selectors.popover.closeButton).click()\n}\n\nexport const transactionDetails = {\n  open: openTransactionDetails,\n  close: closeTransactionDetails\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\nimport { allTextContents } from '../../../utils/allTextContents'\n\nexport async function renameAccount(page: Page, currentAccountName: string, newAccountName: string) {\n  await page.locator(Selectors.accountMenu.accountButton).click()\n\n  const accountNamesLocators = await page.locator(Selectors.accountMenu.accountNames).all()\n\n  const accountNames = await allTextContents(accountNamesLocators)\n\n  const seekedAccountNames = accountNames.filter(\n    (name) => name.toLocaleLowerCase() === currentAccountName.toLocaleLowerCase()\n  )\n\n  if (seekedAccountNames.length === 0) {\n    throw new Error(`[SwitchAccount] Account with name ${currentAccountName} not found`)\n  }\n\n  // biome-ignore lint/style/noNonNullAssertion: this non-null assertion is intentional\n  const accountIndex = accountNames.indexOf(seekedAccountNames[0]!)\n\n  await page.locator(Selectors.accountMenu.renameAccountMenu.listItemButton).nth(accountIndex).click()\n  await page.locator(Selectors.threeDotsMenu.accountDetailsButton).click()\n  await page.locator(Selectors.accountMenu.renameAccountMenu.renameButton).click()\n  await page.locator(Selectors.accountMenu.renameAccountMenu.renameInput).fill(newAccountName)\n  await page.locator(Selectors.accountMenu.renameAccountMenu.confirmRenameButton).click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/HomePage'\n\nexport default async function getAccountAddress(page: Page): Promise<string> {\n  await page.locator(Selectors.threeDotsMenu.threeDotsButton).click()\n  await page.locator(Selectors.threeDotsMenu.accountDetailsButton).click()\n\n  const account = await page.locator(Selectors.copyAccountAddressButton).last().innerText()\n\n  await page.locator(Selectors.threeDotsMenu.accountDetailsCloseButton).click()\n\n  return account\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../../selectors/pages/OnboardingPage'\n\nconst StepSelectors = Selectors.SecretRecoveryPhrasePageSelectors.recoveryStep\n\nexport async function confirmSecretRecoveryPhrase(page: Page, seedPhrase: string) {\n  const seedPhraseWords = seedPhrase.split(' ')\n  const seedPhraseLength = seedPhraseWords.length\n\n  // TODO: This should be validated!\n  await page\n    .locator(StepSelectors.selectNumberOfWordsDropdown)\n    .selectOption(StepSelectors.selectNumberOfWordsOption(seedPhraseLength))\n\n  for (const [index, word] of seedPhraseWords.entries()) {\n    await page.locator(StepSelectors.secretRecoveryPhraseWord(index)).fill(word)\n  }\n\n  const confirmSRPButton = page.locator(StepSelectors.confirmSecretRecoveryPhraseButton)\n\n  if (await confirmSRPButton.isDisabled()) {\n    const errorText = await page.locator(StepSelectors.error).textContent({\n      timeout: 1000\n    })\n\n    throw new Error(`[ConfirmSecretRecoveryPhrase] Invalid seed phrase. Error from MetaMask: ${errorText}`)\n  }\n\n  await confirmSRPButton.click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../../selectors/pages/OnboardingPage'\n\nconst StepSelectors = Selectors.SecretRecoveryPhrasePageSelectors.passwordStep\n\nexport async function createPassword(page: Page, password: string) {\n  await page.locator(StepSelectors.passwordInput).fill(password)\n  await page.locator(StepSelectors.confirmPasswordInput).fill(password)\n\n  // Using `locator.click()` instead of `locator.check()` as a workaround due to dynamically appearing elements.\n  await page.locator(StepSelectors.acceptTermsCheckbox).click()\n\n  const importWalletButton = page.locator(StepSelectors.importWalletButton)\n\n  if (await importWalletButton.isDisabled()) {\n    const errorText = await page.locator(StepSelectors.error).textContent({\n      timeout: 1000\n    })\n\n    throw new Error(`[CreatePassword] Invalid password. Error from MetaMask: ${errorText}`)\n  }\n\n  await importWalletButton.click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../selectors/pages/OnboardingPage'\nimport { importWallet } from './actions'\n\nexport class OnboardingPage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async importWallet(seedPhrase: string, password: string) {\n    return await importWallet(this.page, seedPhrase, password)\n  }\n}\n","import Selectors from '../../../selectors/pages/CrashPage'\n\nexport class CrashPage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n}\n","import type { Page } from '@playwright/test'\nimport { LoadingSelectors } from '../../selectors'\n\n// TODO: Should we decrease the timeout?\n// TODO: Not sure if hard coding the timeout is a good idea but must be enough for now.\nconst DEFAULT_TIMEOUT = 10_000\n\nexport async function waitForSpinnerToVanish(page: Page) {\n  await page.locator(LoadingSelectors.spinner).waitFor({\n    state: 'hidden',\n    timeout: DEFAULT_TIMEOUT\n  })\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/LockPage'\nimport { waitForSpinnerToVanish } from '../../../utils/waitForSpinnerToVanish'\n\nexport async function unlock(page: Page, password: string) {\n  await page.locator(Selectors.passwordInput).fill(password)\n  await page.locator(Selectors.submitButton).click()\n\n  await waitForSpinnerToVanish(page)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../selectors/pages/LockPage'\nimport { unlock } from './actions'\n\nexport class LockPage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async unlock(password: string) {\n    await unlock(this.page, password)\n  }\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../selectors/pages/HomePage'\nimport type { SettingsSidebarMenus } from '../../../selectors/pages/HomePage/settings'\nimport type { Network } from '../../../type/Network'\nimport {\n  addNetwork,\n  addNewAccount,\n  getAccountAddress,\n  importWalletFromPrivateKey,\n  lock,\n  renameAccount,\n  settings,\n  switchAccount,\n  switchNetwork,\n  toggleShowTestNetworks,\n  transactionDetails\n} from './actions'\n\nexport class HomePage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async goBackToHomePage() {\n    await this.page.locator(Selectors.logo).click()\n  }\n\n  async lock() {\n    await lock(this.page)\n  }\n\n  async addNewAccount(accountName: string) {\n    await addNewAccount(this.page, accountName)\n  }\n\n  async renameAccount(currentAccountName: string, newAccountName: string) {\n    await renameAccount(this.page, currentAccountName, newAccountName)\n  }\n\n  async getAccountAddress() {\n    return await getAccountAddress(this.page)\n  }\n\n  async importWalletFromPrivateKey(privateKey: string) {\n    await importWalletFromPrivateKey(this.page, privateKey)\n  }\n\n  async switchAccount(accountName: string) {\n    await switchAccount(this.page, accountName)\n  }\n\n  async openSettings() {\n    await settings.openSettings(this.page)\n  }\n\n  async openSidebarMenu(menu: SettingsSidebarMenus) {\n    await settings.openSidebarMenu(this.page, menu)\n  }\n\n  async toggleShowTestNetworks() {\n    await toggleShowTestNetworks(this.page)\n  }\n\n  async resetAccount() {\n    await settings.advanced.resetAccount(this.page)\n  }\n\n  async toggleDismissSecretRecoveryPhraseReminder() {\n    await settings.advanced.toggleDismissSecretRecoveryPhraseReminder(this.page)\n  }\n\n  async switchNetwork(networkName: string, isTestnet: boolean) {\n    await switchNetwork(this.page, networkName, isTestnet)\n  }\n\n  async addNetwork(network: Network) {\n    await addNetwork(this.page, network)\n  }\n\n  async openTransactionDetails(txIndex: number) {\n    await transactionDetails.open(this.page, txIndex)\n  }\n\n  async closeTransactionDetails() {\n    await transactionDetails.close(this.page)\n  }\n}\n","import type { BrowserContext, Page } from '@playwright/test'\nimport { waitForMetaMaskLoad, waitUntilStable } from './waitFor'\n\nexport async function getNotificationPageAndWaitForLoad(context: BrowserContext, extensionId: string) {\n  const notificationPageUrl = `chrome-extension://${extensionId}/notification.html`\n\n  const isNotificationPage = (page: Page) => page.url().includes(notificationPageUrl)\n\n  // Check if notification page is already open.\n  let notificationPage = context.pages().find(isNotificationPage)\n\n  if (!notificationPage) {\n    notificationPage = await context.waitForEvent('page', {\n      predicate: isNotificationPage\n    })\n  }\n\n  await waitUntilStable(notificationPage as Page)\n\n  // Set pop-up window viewport size to resemble the actual MetaMask pop-up window.\n  await notificationPage.setViewportSize({\n    width: 360,\n    height: 592\n  })\n\n  return await waitForMetaMaskLoad(notificationPage)\n}\n","import type { Locator, Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/NotificationPage'\nimport { allTextContents } from '../../../utils/allTextContents'\n\nasync function selectAccounts(accountsToSelect: string[], accountLocators: Locator[], availableAccountNames: string[]) {\n  for (const account of accountsToSelect) {\n    const accountNameIndex = availableAccountNames.findIndex((name) => name.startsWith(account))\n    if (accountNameIndex < 0) throw new Error(`[ConnectToDapp] Account with name ${account} not found`)\n    await accountLocators[accountNameIndex]?.locator(Selectors.ConnectPage.accountCheckbox).check()\n  }\n}\n\nasync function connectMultipleAccounts(notificationPage: Page, accounts: string[]) {\n  // Wait for the accounts to be loaded as 'all()' doesnt not wait for the results - https://playwright.dev/docs/api/class-locator#locator-all\n  // Additionally disable default account to reuse necessary delay\n  await notificationPage\n    .locator(Selectors.ConnectPage.accountOption)\n    .locator(Selectors.ConnectPage.accountCheckbox)\n    .last()\n    .setChecked(false)\n\n  const accountLocators = await notificationPage.locator(Selectors.ConnectPage.accountOption).all()\n  const accountNames = await allTextContents(accountLocators)\n\n  await selectAccounts(accounts, accountLocators, accountNames)\n}\n\nasync function confirmConnection(notificationPage: Page) {\n  // Click `Next`\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n  // Click `Connect`\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n}\n\n// By default, only the last account will be selected. If you want to select a specific account, pass `accounts` parameter.\nexport async function connectToDapp(notificationPage: Page, accounts?: string[]) {\n  if (accounts && accounts.length > 0) {\n    await connectMultipleAccounts(notificationPage, accounts)\n  }\n\n  await confirmConnection(notificationPage)\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/NotificationPage'\n\nconst signMessage = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n}\n\nconst rejectMessage = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.rejectActionButton).click()\n}\n\nconst signMessageWithRisk = async (notificationPage: Page) => {\n  await signMessage(notificationPage)\n\n  await notificationPage.locator(Selectors.SignaturePage.riskModal.signButton).click()\n}\n\nexport const signSimpleMessage = {\n  sign: signMessage,\n  reject: rejectMessage,\n  signWithRisk: signMessageWithRisk\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/NotificationPage'\n\nconst signMessage = async (notificationPage: Page) => {\n  const scrollDownButton = notificationPage.locator(Selectors.SignaturePage.structuredMessage.scrollDownButton)\n  const signButton = notificationPage.locator(Selectors.ActionFooter.confirmActionButton)\n\n  while (await signButton.isDisabled()) {\n    await scrollDownButton.click()\n  }\n\n  await signButton.click()\n}\n\nconst rejectMessage = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.rejectActionButton).click()\n}\n\n// Used for:\n// - `eth_signTypedData_v3`\n// - `eth_signTypedData_v4`\nexport const signStructuredMessage = {\n  sign: signMessage,\n  reject: rejectMessage\n}\n","import { z } from 'zod'\n\nexport const GasSettingValidation = z.union([\n  z.literal('low'),\n  z.literal('market'),\n  z.literal('aggressive'),\n  z.literal('site'),\n  z\n    .object({\n      maxBaseFee: z.number(),\n      priorityFee: z.number(),\n      // TODO: Add gasLimit range validation.\n      gasLimit: z.number().optional()\n    })\n    .superRefine(({ maxBaseFee, priorityFee }, ctx) => {\n      if (priorityFee > maxBaseFee) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Max base fee cannot be lower than priority fee',\n          path: ['MetaMask', 'confirmTransaction', 'gasSetting', 'maxBaseFee']\n        })\n      }\n    })\n])\n\nexport type GasSettings = z.input<typeof GasSettingValidation>\n","import type { Page } from '@playwright/test'\nimport HomePageSelectors from '../../../../selectors/pages/HomePage'\nimport Selectors from '../../../../selectors/pages/NotificationPage'\nimport { GasSettingValidation, type GasSettings } from '../../../../type/GasSettings'\nimport { waitFor } from '../../../utils/waitFor'\n\nconst confirmTransaction = async (notificationPage: Page, options: GasSettings) => {\n  const gasSetting = GasSettingValidation.parse(options)\n\n  const handleNftSetApprovalForAll = async (page: Page) => {\n    try {\n      const nftApproveButtonLocator = page.locator(\n        Selectors.TransactionPage.nftApproveAllConfirmationPopup.approveButton\n      )\n      const isNfTPopupHidden = await waitFor(() => nftApproveButtonLocator.isHidden(), 3_000, false)\n\n      if (!isNfTPopupHidden) {\n        await nftApproveButtonLocator.click()\n      }\n    } catch (e) {\n      if (page.isClosed()) {\n        return\n      }\n\n      throw new Error(`Failed to handle NFT setApprovalForAll popup: ${e}`)\n    }\n  }\n\n  // By default, the `site` gas setting is used.\n  if (gasSetting === 'site') {\n    await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n\n    await handleNftSetApprovalForAll(notificationPage)\n\n    return\n  }\n\n  // TODO: This button can be invisible in case of a network issue. Verify this, and handle in the future.\n  await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.editGasFeeButton).click()\n\n  const estimationNotAvailableErrorMessage = (gasSetting: string) =>\n    `[ConfirmTransaction] Estimated fee is not available for the \"${gasSetting}\" gas setting. By default, MetaMask would use the \"site\" gas setting in this case, however, this is not YOUR intention.`\n\n  const handleLowMediumOrAggressiveGasSetting = async (\n    gasSetting: string,\n    selectors: { button: string; maxFee: string }\n  ) => {\n    if ((await notificationPage.locator(selectors.maxFee).textContent()) === '--') {\n      throw new Error(estimationNotAvailableErrorMessage(gasSetting))\n    }\n\n    await notificationPage.locator(selectors.button).click()\n  }\n\n  if (gasSetting === 'low') {\n    await handleLowMediumOrAggressiveGasSetting(gasSetting, Selectors.TransactionPage.editGasFeeMenu.lowGasFee)\n  } else if (gasSetting === 'market') {\n    await handleLowMediumOrAggressiveGasSetting(gasSetting, Selectors.TransactionPage.editGasFeeMenu.marketGasFee)\n  } else if (gasSetting === 'aggressive') {\n    await handleLowMediumOrAggressiveGasSetting(gasSetting, Selectors.TransactionPage.editGasFeeMenu.aggressiveGasFee)\n  } else {\n    await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeButton).click()\n\n    await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.maxBaseFeeInput).fill('')\n    await notificationPage\n      .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.maxBaseFeeInput)\n      .fill(gasSetting.maxBaseFee.toString())\n\n    await notificationPage\n      .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.priorityFeeInput)\n      .fill('')\n    await notificationPage\n      .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.priorityFeeInput)\n      .fill(gasSetting.priorityFee.toString())\n\n    if (gasSetting.gasLimit) {\n      await notificationPage\n        .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.gasLimitEditButton)\n        .click()\n\n      await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.gasLimitInput).fill('')\n      await notificationPage\n        .locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.gasLimitInput)\n        .fill(gasSetting.gasLimit.toString())\n\n      const gasLimitErrorLocator = notificationPage.locator(\n        Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.gasLimitError\n      )\n      const isGasLimitErrorHidden = await waitFor(() => gasLimitErrorLocator.isHidden(), 1_000, false) // TODO: Extract & make configurable\n\n      if (!isGasLimitErrorHidden) {\n        const errorText = await gasLimitErrorLocator.textContent({\n          timeout: 1_000 // TODO: Extract & make configurable\n        })\n\n        throw new Error(`[ConfirmTransaction] Invalid gas limit: ${errorText}`)\n      }\n    }\n\n    await notificationPage.locator(Selectors.TransactionPage.editGasFeeMenu.advancedGasFeeMenu.saveButton).click()\n  }\n\n  // We wait until the tooltip is not visible anymore. This indicates a gas setting was changed.\n  // Ideally, we would wait until the edit button changes its text, i.e., \"Site\" -> \"Aggressive\", however, this is not possible right now.\n  // For some unknown reason, if the manual gas setting is too high (>1 ETH), the edit button displays \"Site\" instead of \"Advanced\" ¯\\_(ツ)_/¯\n  const waitForAction = async () => {\n    const isTooltipVisible = await notificationPage\n      .locator(Selectors.TransactionPage.editGasFeeMenu.editGasFeeButtonToolTip)\n      .isVisible()\n\n    return !isTooltipVisible\n  }\n\n  // TODO: Extract & make configurable\n  await waitFor(waitForAction, 3_000, true)\n\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n\n  await handleNftSetApprovalForAll(notificationPage)\n}\n\nconst confirmTransactionAndWaitForMining = async (walletPage: Page, notificationPage: Page, options: GasSettings) => {\n  await walletPage.locator(HomePageSelectors.activityTab.activityTabButton).click()\n\n  const waitForUnapprovedTxs = async () => {\n    const unapprovedTxs = await walletPage.locator(HomePageSelectors.activityTab.pendingUnapprovedTransactions).count()\n\n    return unapprovedTxs !== 0\n  }\n\n  // TODO: Extract timeout.\n  const newTxsFound = await waitFor(waitForUnapprovedTxs, 30_000, false)\n\n  if (!newTxsFound) {\n    throw new Error('No new pending transactions found in 30s')\n  }\n\n  await confirmTransaction(notificationPage, options)\n\n  const waitForMining = async () => {\n    const unapprovedTxs = await walletPage.locator(HomePageSelectors.activityTab.pendingUnapprovedTransactions).count()\n    const pendingTxs = await walletPage.locator(HomePageSelectors.activityTab.pendingApprovedTransactions).count()\n    const queuedTxs = await walletPage.locator(HomePageSelectors.activityTab.pendingQueuedTransactions).count()\n\n    return unapprovedTxs === 0 && pendingTxs === 0 && queuedTxs === 0\n  }\n\n  // TODO: Extract timeout.\n  const allTxsMined = await waitFor(waitForMining, 120_000, false)\n\n  if (!allTxsMined) {\n    throw new Error('All pending and queued transactions were not mined in 120s')\n  }\n}\n\nconst rejectTransaction = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.rejectActionButton).click()\n}\n\nexport const transaction = {\n  confirm: confirmTransaction,\n  reject: rejectTransaction,\n  confirmAndWaitForMining: confirmTransactionAndWaitForMining\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/NotificationPage'\nimport type { GasSettings } from '../../../../type/GasSettings'\nimport { transaction } from './transaction'\n\nconst editTokenPermission = async (notificationPage: Page, customSpendLimit: 'max' | number) => {\n  if (customSpendLimit === 'max') {\n    await notificationPage.locator(Selectors.PermissionPage.approve.maxButton).click()\n    return\n  }\n\n  await notificationPage\n    .locator(Selectors.PermissionPage.approve.customSpendingCapInput)\n    .fill(customSpendLimit.toString())\n}\n\nconst approveTokenPermission = async (notificationPage: Page, gasSetting: GasSettings) => {\n  // Click the \"Next\" button.\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n\n  // Approve flow is identical to the confirm transaction flow after we click the \"Next\" button.\n  await transaction.confirm(notificationPage, gasSetting)\n}\n\nconst rejectTokenPermission = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.ActionFooter.rejectActionButton).click()\n}\n\nexport const approvePermission = {\n  editTokenPermission,\n  approve: approveTokenPermission,\n  reject: rejectTokenPermission\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/NotificationPage'\n\nconst approveNewNetwork = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.NetworkPage.addNetwork.approveButton).click()\n}\n\nconst rejectNewNetwork = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.NetworkPage.addNetwork.cancelButton).click()\n}\n\nconst approveSwitchNetwork = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.NetworkPage.switchNetwork.switchNetworkButton).click()\n}\n\nconst rejectSwitchNetwork = async (notificationPage: Page) => {\n  await notificationPage.locator(Selectors.NetworkPage.switchNetwork.cancelButton).click()\n}\n\nexport const network = {\n  approveNewNetwork,\n  rejectNewNetwork,\n  approveSwitchNetwork,\n  rejectSwitchNetwork\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/NotificationPage'\n\nasync function addNew(notificationPage: Page) {\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n}\n\nexport const token = {\n  addNew\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/NotificationPage'\n\nexport async function providePublicEncryptionKey(notificationPage: Page) {\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n}\n\nexport async function decryptMessage(notificationPage: Page) {\n  await notificationPage.locator(Selectors.ActionFooter.confirmActionButton).click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../selectors/pages/NotificationPage'\nimport type { GasSettings } from '../../../type/GasSettings'\nimport { getNotificationPageAndWaitForLoad } from '../../utils/getNotificationPageAndWaitForLoad'\nimport {\n  approvePermission,\n  connectToDapp,\n  decryptMessage,\n  network,\n  providePublicEncryptionKey,\n  signSimpleMessage,\n  signStructuredMessage,\n  token,\n  transaction\n} from './actions'\n\nexport class NotificationPage {\n  static readonly selectors = Selectors\n  readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async connectToDapp(extensionId: string, accounts?: string[]) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await connectToDapp(notificationPage, accounts)\n  }\n\n  // TODO: Revisit this logic in the future to see if we can increase the performance by utilizing `Promise.race`.\n  private async beforeMessageSignature(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    const scrollButton = notificationPage.locator(Selectors.SignaturePage.structuredMessage.scrollDownButton)\n    const isScrollButtonPresent = (await scrollButton.count()) > 0\n\n    let isScrollButtonVisible = false\n    if (isScrollButtonPresent) {\n      await scrollButton.waitFor({ state: 'visible' })\n      isScrollButtonVisible = true\n    }\n\n    return {\n      notificationPage,\n      isScrollButtonVisible\n    }\n  }\n\n  async signMessage(extensionId: string) {\n    const { notificationPage, isScrollButtonVisible } = await this.beforeMessageSignature(extensionId)\n\n    if (isScrollButtonVisible) {\n      await signStructuredMessage.sign(notificationPage)\n    } else {\n      await signSimpleMessage.sign(notificationPage)\n    }\n  }\n\n  async signMessageWithRisk(extensionId: string) {\n    const { notificationPage } = await this.beforeMessageSignature(extensionId)\n\n    await signSimpleMessage.signWithRisk(notificationPage)\n  }\n\n  async rejectMessage(extensionId: string) {\n    const { notificationPage, isScrollButtonVisible } = await this.beforeMessageSignature(extensionId)\n\n    if (isScrollButtonVisible) {\n      await signStructuredMessage.reject(notificationPage)\n    } else {\n      await signSimpleMessage.reject(notificationPage)\n    }\n  }\n\n  async approveNewNetwork(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await network.approveNewNetwork(notificationPage)\n  }\n\n  async rejectNewNetwork(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await network.rejectNewNetwork(notificationPage)\n  }\n\n  async approveSwitchNetwork(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await network.approveSwitchNetwork(notificationPage)\n  }\n\n  async rejectSwitchNetwork(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await network.rejectSwitchNetwork(notificationPage)\n  }\n\n  async confirmTransaction(extensionId: string, options?: { gasSetting?: GasSettings }) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await transaction.confirm(notificationPage, options?.gasSetting ?? 'site')\n  }\n\n  async rejectTransaction(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await transaction.reject(notificationPage)\n  }\n\n  async confirmTransactionAndWaitForMining(extensionId: string, options?: { gasSetting?: GasSettings }) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await transaction.confirmAndWaitForMining(this.page, notificationPage, options?.gasSetting ?? 'site')\n  }\n\n  async approveTokenPermission(\n    extensionId: string,\n    options?: { spendLimit?: 'max' | number; gasSetting?: GasSettings }\n  ) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    if (options?.spendLimit !== undefined) {\n      await approvePermission.editTokenPermission(notificationPage, options.spendLimit)\n    }\n\n    await approvePermission.approve(notificationPage, options?.gasSetting ?? 'site')\n  }\n\n  async rejectTokenPermission(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await approvePermission.reject(notificationPage)\n  }\n\n  async addNewToken(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await token.addNew(notificationPage)\n  }\n\n  async providePublicEncryptionKey(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await providePublicEncryptionKey(notificationPage)\n  }\n\n  async decryptMessage(extensionId: string) {\n    const notificationPage = await getNotificationPageAndWaitForLoad(this.page.context(), extensionId)\n\n    await decryptMessage(notificationPage)\n  }\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/SettingsPage'\n\nexport default async function enableEthSign(page: Page) {\n  // Settings\n  await page.locator(Selectors.settings.advancedSettings).click()\n  await page.locator(Selectors.settings.ethSignToggle).click()\n\n  // Confirmation modal\n  await page.locator(Selectors.confirmationModal.confirmationCheckbox).click()\n  await page.locator(Selectors.confirmationModal.continueButton).click()\n  await page.locator(Selectors.confirmationModal.manualConfirmationInput).focus()\n  await page.locator(Selectors.confirmationModal.manualConfirmationInput).fill('I only sign what I understand')\n  await page.locator(Selectors.confirmationModal.enableButton).click()\n\n  // Wait for warning\n  await page.locator(Selectors.settings.ethSignWarning).isVisible()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../../selectors/pages/SettingsPage'\n\nexport default async function disableEthSign(page: Page) {\n  await page.locator(Selectors.settings.advancedSettings).click()\n  await page.locator(Selectors.settings.ethSignToggle).click()\n}\n","import type { Page } from '@playwright/test'\nimport Selectors from '../../../selectors/pages/SettingsPage'\nimport { enableEthSign } from './actions'\nimport disableEthSign from './actions/disableEthSign'\n\nexport class SettingsPage {\n  static readonly selectors = Selectors\n\n  readonly page: Page\n\n  constructor(page: Page) {\n    this.page = page\n  }\n\n  async enableEthSign() {\n    await enableEthSign(this.page)\n  }\n\n  async disableEthSign() {\n    await disableEthSign(this.page)\n  }\n}\n","import type { BrowserContext, Page } from '@playwright/test'\nimport { SettingsSidebarMenus } from '../selectors/pages/HomePage/settings'\nimport type { GasSettings } from '../type/GasSettings'\nimport { MetaMaskAbstract } from '../type/MetaMaskAbstract'\nimport type { Network } from '../type/Network'\nimport { CrashPage, HomePage, LockPage, NotificationPage, OnboardingPage } from './pages'\nimport { SettingsPage } from './pages/SettingsPage/page'\n\nconst NO_EXTENSION_ID_ERROR = new Error('MetaMask extensionId is not set')\n\n/**\n * MetaMask class for interacting with the MetaMask extension in Playwright tests.\n *\n * This class provides methods to perform various operations on the MetaMask extension,\n * such as importing wallets, switching networks, confirming transactions, and more.\n *\n * @class\n * @extends MetaMaskAbstract\n */\nexport class MetaMask extends MetaMaskAbstract {\n  /**\n   * This property can be used to access selectors for the crash page.\n   *\n   * @public\n   * @readonly\n   */\n  readonly crashPage: CrashPage\n\n  /**\n   * This property can be used to access selectors for the onboarding page.\n   *\n   * @public\n   * @readonly\n   */\n  readonly onboardingPage: OnboardingPage\n\n  /**\n   * This property can be used to access selectors for the lock page.\n   *\n   * @public\n   * @readonly\n   */\n  readonly lockPage: LockPage\n\n  /**\n   * This property can be used to access selectors for the home page.\n   *\n   * @public\n   * @readonly\n   */\n  readonly homePage: HomePage\n\n  /**\n   * This property can be used to access selectors for the notification page.\n   *\n   * @public\n   * @readonly\n   */\n  readonly notificationPage: NotificationPage\n\n  /**\n   * This property can be used to access selectors for the settings page.\n   *\n   * @public\n   * @readonly\n   */\n  readonly settingsPage: SettingsPage\n\n  /**\n   * Creates an instance of MetaMask.\n   *\n   * @param context - The Playwright BrowserContext in which the MetaMask extension is running.\n   * @param page - The Playwright Page object representing the MetaMask extension's main page.\n   * @param password - The password for the MetaMask wallet.\n   * @param extensionId - The ID of the MetaMask extension. Optional if no interaction with dapps is required.\n   */\n  constructor(\n    readonly context: BrowserContext,\n    readonly page: Page,\n    override readonly password: string,\n    override readonly extensionId?: string\n  ) {\n    super(password, extensionId)\n\n    this.crashPage = new CrashPage()\n    this.onboardingPage = new OnboardingPage(page)\n    this.lockPage = new LockPage(page)\n    this.homePage = new HomePage(page)\n    this.notificationPage = new NotificationPage(page)\n    this.settingsPage = new SettingsPage(page)\n  }\n\n  /**\n   * Imports a wallet using the given seed phrase.\n   *\n   * @param seedPhrase - The seed phrase to import.\n   */\n  async importWallet(seedPhrase: string): Promise<void> {\n    await this.onboardingPage.importWallet(seedPhrase, this.password)\n  }\n\n  /**\n   * Adds a new account with the given name.\n   *\n   * @param accountName - The name for the new account.\n   */\n  async addNewAccount(accountName: string): Promise<void> {\n    await this.homePage.addNewAccount(accountName)\n  }\n\n  /**\n   * Renames the currently selected account.\n   *\n   * @param currentAccountName - The current account name.\n   * @param newAccountName - The new name for the account.\n   */\n  async renameAccount(currentAccountName: string, newAccountName: string): Promise<void> {\n    await this.homePage.renameAccount(currentAccountName, newAccountName)\n  }\n\n  /**\n   * Imports a wallet using the given private key.\n   *\n   * @param privateKey - The private key to import.\n   */\n  async importWalletFromPrivateKey(privateKey: string): Promise<void> {\n    await this.homePage.importWalletFromPrivateKey(privateKey)\n  }\n\n  /**\n   * Switches to the account with the given name.\n   *\n   * @param accountName - The name of the account to switch to.\n   */\n  async switchAccount(accountName: string): Promise<void> {\n    await this.homePage.switchAccount(accountName)\n  }\n\n  /**\n   * Adds a new network to MetaMask.\n   *\n   * @param network - The network configuration to add.\n   */\n  async addNetwork(network: Network): Promise<void> {\n    await this.homePage.addNetwork(network)\n  }\n\n  /**\n   * Gets the address of the currently selected account.\n   *\n   * @returns The account address.\n   */\n  async getAccountAddress(): Promise<string> {\n    return await this.homePage.getAccountAddress()\n  }\n\n  /**\n   * Switches to the specified network.\n   *\n   * @param networkName - The name of the network to switch to.\n   * @param isTestnet - Whether the network is a testnet. Default is false.\n   */\n  async switchNetwork(networkName: string, isTestnet = false): Promise<void> {\n    await this.homePage.switchNetwork(networkName, isTestnet)\n  }\n\n  /**\n   * Connects MetaMask to a dapp.\n   *\n   * @param accounts - Optional array of account addresses to connect.\n   * @throws {Error} If extensionId is not set.\n   */\n  async connectToDapp(accounts?: string[]): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.connectToDapp(this.extensionId, accounts)\n  }\n\n  /**\n   * Locks the MetaMask wallet.\n   */\n  async lock(): Promise<void> {\n    await this.homePage.lock()\n  }\n\n  /**\n   * Unlocks the MetaMask wallet.\n   */\n  async unlock(): Promise<void> {\n    await this.lockPage.unlock(this.password)\n  }\n\n  /**\n   * Confirms a signature request.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async confirmSignature(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.signMessage(this.extensionId)\n  }\n\n  /**\n   * Confirms a signature request with risk.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async confirmSignatureWithRisk(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.signMessageWithRisk(this.extensionId)\n  }\n\n  /**\n   * Rejects a signature request.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async rejectSignature(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectMessage(this.extensionId)\n  }\n\n  /**\n   * Approves adding a new network.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async approveNewNetwork(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.approveNewNetwork(this.extensionId)\n  }\n\n  /**\n   * Rejects adding a new network.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async rejectNewNetwork(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectNewNetwork(this.extensionId)\n  }\n\n  /**\n   * Approves switching to a new network.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async approveSwitchNetwork(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.approveSwitchNetwork(this.extensionId)\n  }\n\n  /**\n   * Rejects switching to a new network.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async rejectSwitchNetwork(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectSwitchNetwork(this.extensionId)\n  }\n\n  /**\n   * Confirms a transaction.\n   *\n   * @param options - Optional gas settings for the transaction.\n   * @throws {Error} If extensionId is not set.\n   */\n  async confirmTransaction(options?: { gasSetting?: GasSettings }): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.confirmTransaction(this.extensionId, options)\n  }\n\n  /**\n   * Rejects a transaction.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async rejectTransaction(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectTransaction(this.extensionId)\n  }\n\n  /**\n   * Approves a token permission request.\n   *\n   * @param options - Optional settings for the approval.\n   * @throws {Error} If extensionId is not set.\n   */\n  async approveTokenPermission(options?: {\n    spendLimit?: 'max' | number\n    gasSetting?: GasSettings\n  }): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.approveTokenPermission(this.extensionId, options)\n  }\n\n  /**\n   * Rejects a token permission request.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async rejectTokenPermission(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.rejectTokenPermission(this.extensionId)\n  }\n\n  /**\n   * Navigates back to the home page.\n   */\n  async goBackToHomePage(): Promise<void> {\n    await this.homePage.goBackToHomePage()\n  }\n\n  /**\n   * Opens the settings page.\n   */\n  async openSettings(): Promise<void> {\n    await this.homePage.openSettings()\n  }\n\n  /**\n   * Opens a specific sidebar menu in the settings.\n   *\n   * @param menu - The menu to open.\n   */\n  async openSidebarMenu(menu: SettingsSidebarMenus): Promise<void> {\n    await this.homePage.openSidebarMenu(menu)\n  }\n\n  /**\n   * Toggles the display of test networks.\n   */\n  async toggleShowTestNetworks(): Promise<void> {\n    await this.homePage.toggleShowTestNetworks()\n  }\n\n  /**\n   * Toggles the dismissal of the secret recovery phrase reminder.\n   */\n  async toggleDismissSecretRecoveryPhraseReminder(): Promise<void> {\n    await this.homePage.toggleDismissSecretRecoveryPhraseReminder()\n  }\n\n  /**\n   * Resets the account.\n   */\n  async resetAccount(): Promise<void> {\n    await this.homePage.resetAccount()\n  }\n\n  /**\n   * Enables eth_sign (unsafe).\n   */\n  async unsafe_enableEthSign(): Promise<void> {\n    await this.homePage.openSettings()\n    await this.settingsPage.enableEthSign()\n  }\n\n  /**\n   * Disables eth_sign.\n   */\n  async disableEthSign(): Promise<void> {\n    await this.homePage.openSettings()\n    await this.settingsPage.disableEthSign()\n  }\n\n  /**\n   * Adds a new token.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async addNewToken(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.addNewToken(this.extensionId)\n  }\n\n  /**\n   * Provides a public encryption key.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async providePublicEncryptionKey(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.providePublicEncryptionKey(this.extensionId)\n  }\n\n  /**\n   * Decrypts a message.\n   *\n   * @throws {Error} If extensionId is not set.\n   */\n  async decrypt(): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.decryptMessage(this.extensionId)\n  }\n\n  /**\n   * Confirms a transaction and waits for it to be mined.\n   *\n   * @param options - Optional gas settings for the transaction.\n   * @throws {Error} If extensionId is not set.\n   */\n  async confirmTransactionAndWaitForMining(options?: {\n    gasSetting?: GasSettings\n  }): Promise<void> {\n    if (!this.extensionId) {\n      throw NO_EXTENSION_ID_ERROR\n    }\n\n    await this.notificationPage.confirmTransactionAndWaitForMining(this.extensionId, options)\n  }\n\n  /**\n   * Opens the details of a specific transaction.\n   *\n   * @param txIndex - The index of the transaction to open.\n   */\n  async openTransactionDetails(txIndex: number): Promise<void> {\n    await this.homePage.openTransactionDetails(txIndex)\n  }\n\n  /**\n   * Closes the transaction details view.\n   */\n  async closeTransactionDetails(): Promise<void> {\n    await this.homePage.closeTransactionDetails()\n  }\n}\n","import path from 'node:path'\nimport { type Page, chromium } from '@playwright/test'\nimport { test as base } from '@playwright/test'\nimport {\n  CACHE_DIR_NAME,\n  createTempContextDir,\n  defineWalletSetup,\n  removeTempContextDir\n} from '@synthetixio/synpress-cache'\nimport { type Anvil, type CreateAnvilOptions, createPool } from '@viem/anvil'\nimport fs from 'fs-extra'\nimport { prepareExtension } from '../../prepareExtension'\nimport { MetaMask } from '../MetaMask'\nimport { getExtensionId, unlockForFixture } from '../fixture-actions'\nimport { persistLocalStorage } from '../fixture-actions/persistLocalStorage'\nimport { waitForMetaMaskWindowToBeStable } from '../utils/waitFor'\n\ntype MetaMaskFixtures = {\n  _contextPath: string\n  metamask: MetaMask\n  extensionId: string\n  metamaskPage: Page\n  createAnvilNode: (options?: CreateAnvilOptions) => Promise<{ anvil: Anvil; rpcUrl: string; chainId: number }>\n  connectToAnvil: () => Promise<void>\n  deployToken: () => Promise<void>\n  deployAndMintERC1155: () => Promise<void>\n}\n\n// If setup metamaskPage in a fixture, browser does not handle it properly (even if ethereum.isConnected() is true, it's not reflected on the page).\nlet _metamaskPage: Page\n\nexport const metaMaskFixtures = (walletSetup: ReturnType<typeof defineWalletSetup>, slowMo = 0) => {\n  return base.extend<MetaMaskFixtures>({\n    _contextPath: async ({ browserName }, use, testInfo) => {\n      const contextPath = await createTempContextDir(browserName, testInfo.testId)\n\n      await use(contextPath)\n\n      const error = await removeTempContextDir(contextPath)\n      if (error) {\n        console.error(error)\n      }\n    },\n    context: async ({ context: currentContext, _contextPath }, use) => {\n      const cacheDirPath = path.join(process.cwd(), CACHE_DIR_NAME, walletSetup.hash)\n      if (!(await fs.exists(cacheDirPath))) {\n        throw new Error(`Cache for ${walletSetup.hash} does not exist. Create it first!`)\n      }\n\n      // Copying the cache to the temporary context directory.\n      await fs.copy(cacheDirPath, _contextPath)\n\n      const metamaskPath = await prepareExtension()\n\n      // We don't need the `--load-extension` arg since the extension is already loaded in the cache.\n      const browserArgs = [`--disable-extensions-except=${metamaskPath}`]\n\n      if (process.env.HEADLESS) {\n        browserArgs.push('--headless=new')\n\n        if (slowMo > 0) {\n          console.warn('[WARNING] Slow motion makes no sense in headless mode. It will be ignored!')\n        }\n      }\n\n      const context = await chromium.launchPersistentContext(_contextPath, {\n        headless: false,\n        args: browserArgs,\n        slowMo: process.env.HEADLESS ? 0 : slowMo\n      })\n\n      const { cookies, origins } = await currentContext.storageState()\n\n      if (cookies) {\n        await context.addCookies(cookies)\n      }\n      if (origins && origins.length > 0) {\n        await persistLocalStorage(origins, context)\n      }\n\n      // TODO: This should be stored in a store to speed up the tests.\n      const extensionId = await getExtensionId(context, 'MetaMask')\n\n      // TODO: Not sure if this is the best approach. Time will tell.\n      // We're utilizing the blank page here.\n      _metamaskPage = context.pages()[0] as Page\n\n      await _metamaskPage.goto(`chrome-extension://${extensionId}/home.html`)\n      await waitForMetaMaskWindowToBeStable(_metamaskPage)\n      await unlockForFixture(_metamaskPage, walletSetup.walletPassword)\n\n      await use(context)\n\n      await context.close()\n    },\n    metamaskPage: async ({ context: _ }, use) => {\n      await use(_metamaskPage)\n    },\n    extensionId: async ({ context }, use) => {\n      const extensionId = await getExtensionId(context, 'MetaMask')\n\n      await use(extensionId)\n    },\n    metamask: async ({ context, extensionId }, use) => {\n      const metamask = new MetaMask(context, _metamaskPage, walletSetup.walletPassword, extensionId)\n\n      await use(metamask)\n    },\n    page: async ({ page }, use) => {\n      await page.goto('/')\n\n      await use(page)\n    },\n    createAnvilNode: async ({ context: _ }, use) => {\n      const pool = createPool()\n\n      await use(async (options?: CreateAnvilOptions) => {\n        const nodeId = Array.from(pool.instances()).length\n        const anvil = await pool.start(nodeId, options)\n\n        const rpcUrl = `http://${anvil.host}:${anvil.port}`\n\n        const DEFAULT_ANVIL_CHAIN_ID = 31337\n        const chainId = options?.chainId ?? DEFAULT_ANVIL_CHAIN_ID\n\n        return { anvil, rpcUrl, chainId }\n      })\n\n      await pool.empty()\n    },\n    connectToAnvil: async ({ metamask, createAnvilNode }, use) => {\n      await use(async () => {\n        const { rpcUrl, chainId } = await createAnvilNode({\n          chainId: 1338\n        })\n\n        await metamask.addNetwork({\n          name: 'Anvil',\n          rpcUrl,\n          chainId,\n          symbol: 'ETH',\n          blockExplorerUrl: 'https://etherscan.io/'\n        })\n      })\n    },\n    deployToken: async ({ page, metamask, connectToAnvil }, use) => {\n      await use(async () => {\n        await connectToAnvil()\n\n        await page.locator('#createToken').click()\n\n        await metamask.confirmTransaction()\n      })\n    },\n    deployAndMintERC1155: async ({ page, metamask, connectToAnvil }, use) => {\n      await use(async () => {\n        await connectToAnvil()\n\n        await page.locator('#deployERC1155Button').click()\n        await metamask.confirmTransaction()\n\n        await page.locator('#batchMintButton').click()\n        await metamask.confirmTransactionAndWaitForMining()\n      })\n    }\n  })\n}\n","import path from 'node:path'\nimport { downloadFile, ensureCacheDirExists, unzipArchive } from '@synthetixio/synpress-cache'\nimport fs from 'fs-extra'\n\nexport const DEFAULT_METAMASK_VERSION = '11.9.1'\nexport const EXTENSION_DOWNLOAD_URL = `https://github.com/MetaMask/metamask-extension/releases/download/v${DEFAULT_METAMASK_VERSION}/metamask-chrome-${DEFAULT_METAMASK_VERSION}.zip`\n\nexport async function prepareExtension(forceCache = true) {\n  let outputDir = ''\n  if (forceCache) {\n    outputDir = ensureCacheDirExists()\n  } else {\n    outputDir = process.platform === 'win32' ? `file:\\\\\\\\\\\\${outputDir}` : path.resolve('./', 'downloads')\n\n    if (!(await fs.exists(outputDir))) {\n      fs.mkdirSync(outputDir)\n    }\n  }\n\n  const downloadResult = await downloadFile({\n    url: EXTENSION_DOWNLOAD_URL,\n    outputDir,\n    fileName: `metamask-chrome-${DEFAULT_METAMASK_VERSION}.zip`\n  })\n\n  const unzipResult = await unzipArchive({\n    archivePath: downloadResult.filePath\n  })\n\n  return unzipResult.outputPath\n}\n","import type { Page } from '@playwright/test'\nimport { errors as playwrightErrors } from '@playwright/test'\nimport { MetaMask } from '..'\nimport { CrashPage, HomePage } from '../pages'\nimport { closePopover, closeRecoveryPhraseReminder } from '../pages/HomePage/actions'\nimport { waitForSpinnerToVanish } from '../utils/waitForSpinnerToVanish'\n\n/**\n *  A more advanced version of the `MetaMask.unlock()` function that incorporates various workarounds for MetaMask issues, among other things.\n *  This function should be used instead of the `MetaMask.unlock()` when passing it to the `testWithSynpress` function.\n *\n * @param page - The MetaMask tab page.\n * @param password - The password of the MetaMask wallet.\n */\nexport async function unlockForFixture(page: Page, password: string) {\n  const metamask = new MetaMask(page.context(), page, password)\n\n  await unlockWalletButReloadIfSpinnerDoesNotVanish(metamask)\n\n  await retryIfMetaMaskCrashAfterUnlock(page)\n\n  await closePopover(page)\n  await closeRecoveryPhraseReminder(page)\n}\n\nasync function unlockWalletButReloadIfSpinnerDoesNotVanish(metamask: MetaMask) {\n  try {\n    await metamask.unlock()\n  } catch (e) {\n    if (e instanceof playwrightErrors.TimeoutError) {\n      console.warn('[UnlockWalletButReloadIfSpinnerDoesNotVanish] Unlocking MetaMask timed out. Reloading page...')\n\n      const page = metamask.page\n\n      await page.reload()\n      await waitForSpinnerToVanish(page)\n    } else {\n      throw e\n    }\n  }\n}\n\nasync function retryIfMetaMaskCrashAfterUnlock(page: Page) {\n  const homePageLogoLocator = page.locator(HomePage.selectors.logo)\n\n  const isHomePageLogoVisible = await homePageLogoLocator.isVisible()\n  const isPopoverVisible = await page.locator(HomePage.selectors.popover.closeButton).isVisible()\n\n  if (!isHomePageLogoVisible && !isPopoverVisible) {\n    if (await page.locator(CrashPage.selectors.header).isVisible()) {\n      const errors = await page.locator(CrashPage.selectors.errors).allTextContents()\n\n      console.warn(['[RetryIfMetaMaskCrashAfterUnlock] MetaMask crashed due to:', ...errors].join('\\n'))\n\n      console.log('[RetryIfMetaMaskCrashAfterUnlock] Reloading page...')\n      await page.reload()\n\n      try {\n        await homePageLogoLocator.waitFor({\n          state: 'visible',\n          timeout: 10_000 // TODO: Extract & Make this timeout configurable.\n        })\n        console.log('[RetryIfMetaMaskCrashAfterUnlock] Successfully restored MetaMask!')\n      } catch (e) {\n        if (e instanceof playwrightErrors.TimeoutError) {\n          throw new Error(\n            ['[RetryIfMetaMaskCrashAfterUnlock] Reload did not help. Throwing with the crash cause:', ...errors].join(\n              '\\n'\n            )\n          )\n        }\n\n        throw e\n      }\n    }\n  }\n}\n","import type { BrowserContext } from '@playwright/test'\nimport { z } from 'zod'\n\nconst Extension = z.object({\n  id: z.string(),\n  name: z.string()\n})\n\nconst Extensions = z.array(Extension)\n\n/**\n * Returns the extension ID for the given extension name. The ID is fetched from the `chrome://extensions` page.\n *\n * ::: tip\n * This function soon will be removed to improve the developer experience! 😇\n * :::\n *\n * @param context - The browser context.\n * @param extensionName - The name of the extension, e.g., `MetaMask`.\n *\n * @returns The extension ID.\n */\nexport async function getExtensionId(context: BrowserContext, extensionName: string) {\n  const page = await context.newPage()\n  await page.goto('chrome://extensions')\n\n  const unparsedExtensions = await page.evaluate('chrome.management.getAll()')\n\n  const allExtensions = Extensions.parse(unparsedExtensions)\n  const targetExtension = allExtensions.find(\n    (extension) => extension.name.toLowerCase() === extensionName.toLowerCase()\n  )\n\n  if (!targetExtension) {\n    throw new Error(\n      [\n        `[GetExtensionId] Extension with name ${extensionName} not found.`,\n        `Available extensions: ${allExtensions.map((extension) => extension.name).join(', ')}`\n      ].join('\\n')\n    )\n  }\n\n  await page.close()\n\n  return targetExtension.id\n}\n","import type { BrowserContext } from '@playwright/test'\n\nexport async function persistLocalStorage(\n  origins: {\n    origin: string\n    localStorage: { name: string; value: string }[]\n  }[],\n  context: BrowserContext\n) {\n  const newPage = await context.newPage()\n\n  for (const { origin, localStorage } of origins) {\n    const frame = newPage.mainFrame()\n    await frame.goto(origin)\n\n    await frame.evaluate((localStorageData) => {\n      localStorageData.forEach(({ name, value }) => {\n        window.localStorage.setItem(name, value)\n      })\n    }, localStorage)\n  }\n\n  await newPage.close()\n}\n"]}