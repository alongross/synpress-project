{"version":3,"sources":["../../../src/cypress/support/mockEthereum.ts","../../../src/constants.ts","../../../src/cypress/EthereumWalletMock.ts","../../../src/type/EthereumWalletMockAbstract.ts","../../../src/cypress/utils/getEthereumWalletMock.ts","../../../src/cypress/support/synpressCommands.ts"],"names":["ethereumWalletMock"],"mappings":"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","sourcesContent":["/**\n * Mock Ethereum Environment for Cypress Tests\n *\n * This module provides a function to set up a mocked Ethereum environment\n * for Cypress tests. It utilizes the Web3Mock library to simulate Ethereum\n * blockchain interactions and MetaMask wallet behavior.\n *\n * @remarks\n * Key features:\n * - Mocks the Ethereum blockchain environment\n * - Simulates MetaMask wallet functionality\n * - Automatically applied before each test suite\n *\n * This function is typically called in the Cypress support file or test\n * setup to ensure all tests run in a controlled, mocked Ethereum environment.\n * It allows for consistent and predictable testing of Ethereum-based\n * applications without the need for a real blockchain or wallet.\n *\n * @example\n * ```typescript\n * // In your Cypress support file\n * import { mockEthereum } from '@synthetixio/synpress';\n *\n * mockEthereum();\n * ```\n */\n\nexport default function mockEthereum(): void {\n  before(() => {\n    cy.visit('/', {\n      onBeforeLoad: (window) => {\n        window.Web3Mock.mock({\n          blockchain: 'ethereum',\n          wallet: 'metamask'\n        })\n      }\n    })\n  })\n}\n","// Wallet\nexport const SEED_PHRASE = 'test test test test test test test test test test test junk'\n\nexport const BLOCKCHAIN = 'ethereum'\n\nexport const ACCOUNT_MOCK = '0xd73b04b0e696b0945283defa3eee453814758f1a'\n\n// Anvil\nexport const ANVIL_CHAIN_ID = 31337\n\nexport const ANVIL_URL_URL = 'http://anvil:5000'\n","import { mnemonicToAccount, privateKeyToAccount } from 'viem/accounts'\nimport { ACCOUNT_MOCK, BLOCKCHAIN } from '../constants'\nimport { EthereumWalletMockAbstract } from '../type/EthereumWalletMockAbstract'\nimport type { Network } from '../type/Network'\nimport type { WalletMock } from '../type/WalletMock'\n\nexport default class EthereumWalletMock extends EthereumWalletMockAbstract {\n  constructor(wallet: WalletMock = 'metamask') {\n    super(wallet)\n    this.wallet = wallet\n  }\n\n  // /**\n  //  * Imports a wallet using the given seed phrase.\n  //  *\n  //  * @param seedPhrase - The seed phrase to import.\n  //  */\n  importWallet(seedPhrase: string) {\n    this.seedPhrase = seedPhrase\n\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        accounts: { return: [ACCOUNT_MOCK] }\n      })\n    })\n  }\n\n  // /**\n  //  * Retrieves the current account address.\n  //  */\n  getAllAccounts(): Cypress.Chainable<`0x${string}`[]> {\n    return cy.window().then((cypressWindow) => {\n      return cypressWindow.ethereum.request({\n        method: 'eth_requestAccounts'\n      })\n    })\n  }\n\n  // /**\n  //  * Adds a new account. This account is based on the initially imported seed phrase.\n  //  */\n  addNewAccount() {\n    this.getAllAccounts().then((accounts) => {\n      const newAccount = mnemonicToAccount(this.seedPhrase || '', {\n        accountIndex: accounts?.length\n      })\n\n      cy.window().then((cypressWindow) => {\n        cypressWindow.Web3Mock.mock({\n          blockchain: BLOCKCHAIN,\n          wallet: this.wallet,\n          accounts: {\n            return: [newAccount.address, ...accounts]\n          }\n        })\n      })\n    })\n  }\n\n  // /**\n  //  * Imports a wallet using the given private key.\n  //  *\n  //  * @param privateKey - The private key to import.\n  //  */\n  importWalletFromPrivateKey(privateKey: `0x${string}`) {\n    const newAccount = privateKeyToAccount(privateKey)\n\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        accounts: { return: [newAccount.address] }\n      })\n    })\n  }\n\n  /**\n  //  * Switches to the account with the given name.\n  //  *\n  //  * @param accountAddress - The name of the account to switch to.\n  //  */\n  switchAccount(accountAddress: string) {\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        accounts: { return: [accountAddress] }\n      })\n    })\n  }\n\n  /**\n  //  * Adds a new network.\n  //  *\n  //  * @param network - The network object to use for adding the new network.\n  //  */\n  async addNetwork(network: Network) {\n    const networkInfo = {\n      chainId: network.chainId,\n      chainName: network.name,\n      nativeCurrency: network.nativeCurrency,\n      rpcUrls: [network.rpcUrl],\n      blockExplorerUrls: [network.blockExplorerUrl]\n    }\n\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        network: {\n          add: networkInfo\n        }\n      })\n    })\n  }\n\n  // /**\n  //  * Retrieves the current account address.\n  //  */\n  getAccountAddress() {\n    return this.getAllAccounts().then((accounts) => {\n      return accounts[0] as `0x${string}`\n    })\n  }\n\n  // /**\n  //  * Switches to the network with the given name.\n  //  *\n  //  * @param networkName - The name of the network to switch to.\n  //  */\n  async switchNetwork(networkName: string) {\n    cy.window().then((cypressWindow) => {\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet: this.wallet,\n        network: {\n          add: {\n            chainId: 1,\n            chainName: networkName,\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            rpcUrls: ['http://localhost:8545']\n          }\n        }\n      })\n    })\n  }\n\n  // /**\n  //  * Connects wallet to the dapp.\n  //  *\n  //  * @param wallet - The wallet to connect to the dapp.\n  //  */\n  async connectToDapp(wallet: WalletMock = 'metamask') {\n    this.wallet = wallet\n\n    cy.window().then((cypressWindow) => {\n      class WalletConnectStub {}\n\n      let connector: WalletConnectStub | undefined\n\n      if (wallet === 'walletconnect') {\n        connector = WalletConnectStub\n      }\n\n      cypressWindow.Web3Mock.mock({\n        blockchain: BLOCKCHAIN,\n        wallet,\n        accounts: { return: [ACCOUNT_MOCK] },\n        // @ts-ignore\n        connector\n      })\n    })\n  }\n}\n","import type { Network } from './Network'\nimport type { WalletMock } from './WalletMock'\n\nexport abstract class EthereumWalletMockAbstract {\n  seedPhrase: string | undefined\n  wallet: WalletMock\n\n  protected constructor(wallet: WalletMock = 'metamask') {\n    this.wallet = wallet\n  }\n\n  /**\n   * Imports a wallet using the given seed phrase.\n   *\n   * @param seedPhrase - The seed phrase to import.\n   */\n  abstract importWallet(seedPhrase: string): void\n\n  /**\n   * Retrieves the current account address.\n   */\n  abstract getAllAccounts(): Cypress.Chainable<`0x${string}`[]> | Promise<`0x${string}`[] | undefined>\n\n  /**\n   * Adds a new account. This account is based on the initially imported seed phrase.\n   */\n  abstract addNewAccount(): void\n\n  /**\n   * Imports a wallet using the given private key.\n   *\n   * @param privateKey - The private key to import.\n   */\n  abstract importWalletFromPrivateKey(privateKey: `0x${string}`): void\n\n  /**\n   * Switches to the account with the given name.\n   *\n   * @param accountAddress - The name of the account to switch to.\n   */\n  abstract switchAccount(accountAddress: string): void\n\n  /**\n   * Adds a new network.\n   *\n   * @param network - The network object to use for adding the new network.\n   */\n  abstract addNetwork(network: Network): void\n\n  /**\n   * Retrieves the current account address.\n   */\n  abstract getAccountAddress(): Cypress.Chainable<`0x${string}`> | Promise<`0x${string}` | undefined>\n\n  /**\n   * Switches to the network with the given name.\n   *\n   * @param networkName - The name of the network to switch to.\n   */\n  abstract switchNetwork(networkName: string): void\n\n  /**\n   * Connects wallet to the dapp.\n   *\n   * @param wallet - The wallet to connect to the dapp.\n   */\n  abstract connectToDapp(wallet: WalletMock): void\n}\n","import { SEED_PHRASE } from '../../constants'\nimport EthereumWalletMock from '../EthereumWalletMock'\n\nlet ethereumWalletMock: EthereumWalletMock | undefined\n\nexport default function getEthereumWalletMock() {\n  if (ethereumWalletMock) return ethereumWalletMock\n\n  ethereumWalletMock = new EthereumWalletMock()\n  ethereumWalletMock.importWallet(SEED_PHRASE)\n\n  return ethereumWalletMock\n}\n","/// <reference types=\"cypress\" />\n// ***********************************************\n// This example commands.ts shows you how to\n// create various custom commands and overwrite\n// existing commands.\n//\n// For more comprehensive examples of custom\n// commands please read more here:\n// https://on.cypress.io/custom-commands\n// ***********************************************\n\nimport type { Network } from '../../type/Network'\nimport type { WalletMock } from '../../type/WalletMock'\nimport getEthereumWalletMock from '../utils/getEthereumWalletMock'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      importWallet(seedPhrase: string): Chainable<void>\n      importWalletFromPrivateKey(privateKey: `0x${string}`): Chainable<void>\n      addNewAccount(): Chainable<void>\n      getAllAccounts(): Chainable<Array<`0x${string}`>>\n      getAccountAddress(): Chainable<`0x${string}`>\n      switchAccount(accountAddress: string): Chainable<void>\n      addNetwork(network: Network): Chainable<void>\n      switchNetwork(networkName: string): Chainable<void>\n      connectToDapp(wallet?: WalletMock): Chainable<void>\n    }\n\n    interface ApplicationWindow {\n      Web3Mock: {\n        mock: (options: {\n          blockchain: string\n          wallet: string\n          accounts?: { return: Array<string> }\n          network?: {\n            add: {\n              chainId: number\n              chainName: string\n              nativeCurrency:\n                | {\n                    name: string\n                    symbol: string\n                    decimals: number\n                  }\n                | undefined\n              rpcUrls: Array<string>\n            }\n          }\n        }) => void\n      }\n    }\n  }\n}\n\n/**\n * Synpress Commands for Ethereum Wallet Mock\n *\n * This module extends Cypress with custom commands for interacting with a mocked Ethereum wallet.\n * It provides functionalities for wallet management, account operations, and network interactions.\n *\n * Key features include:\n * - Wallet: Import wallet from seed phrase or private key\n * - Account: Add new accounts, get all accounts, switch between accounts\n * - Network: Add new networks, switch between networks\n * - dApp Interaction: Connect to dApps\n *\n * These commands enhance the testing capabilities for Ethereum-based applications,\n * allowing for comprehensive end-to-end testing of dApps using a mocked Ethereum wallet.\n * This approach provides a controlled environment for testing without the need for a real wallet,\n * making tests more reliable and easier to set up.\n *\n * @module SynpressCommandsForEthereumWalletMock\n */\n\n/**\n * Initializes Synpress commands for the Ethereum Wallet Mock.\n *\n * This function adds custom Cypress commands for interacting with a mocked Ethereum wallet.\n * These commands include wallet import, account management, network operations, and dApp connections.\n *\n * @example\n * ```typescript\n * import { synpressCommandsForEthereumWalletMock } from '@synthetixio/synpress';\n *\n * synpressCommandsForEthereumWalletMock();\n * ```\n */\nexport default function synpressCommandsForEthereumWalletMock(): void {\n  /**\n   * Imports a wallet using a seed phrase.\n   * @param seedPhrase - The seed phrase to import the wallet.\n   */\n  Cypress.Commands.add('importWallet', (seedPhrase: string) => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    ethereumWalletMock.importWallet(seedPhrase)\n  })\n\n  /**\n   * Imports a wallet using a private key.\n   * @param privateKey - The private key to import the wallet.\n   */\n  Cypress.Commands.add('importWalletFromPrivateKey', (privateKey: `0x${string}`) => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    ethereumWalletMock.importWalletFromPrivateKey(privateKey)\n  })\n\n  /**\n   * Adds a new account to the wallet.\n   * @returns A promise that resolves when the account is added.\n   */\n  Cypress.Commands.add('addNewAccount', () => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    return ethereumWalletMock.addNewAccount()\n  })\n\n  /**\n   * Retrieves all accounts in the wallet.\n   * @returns A promise that resolves with an array of account addresses.\n   */\n  Cypress.Commands.add('getAllAccounts', () => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    return ethereumWalletMock.getAllAccounts()\n  })\n\n  /**\n   * Gets the current account address.\n   * @returns A promise that resolves with the current account address.\n   */\n  Cypress.Commands.add('getAccountAddress', () => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    return ethereumWalletMock.getAccountAddress()\n  })\n\n  /**\n   * Switches to a different account.\n   * @param accountAddress - The address of the account to switch to.\n   */\n  Cypress.Commands.add('switchAccount', (accountAddress: string) => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    ethereumWalletMock.switchAccount(accountAddress)\n  })\n\n  /**\n   * Adds a new network to the wallet.\n   * @param network - The network configuration to add.\n   */\n  Cypress.Commands.add('addNetwork', (network: Network) => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    ethereumWalletMock.addNetwork(network)\n  })\n\n  /**\n   * Switches to a different network.\n   * @param networkName - The name of the network to switch to.\n   */\n  Cypress.Commands.add('switchNetwork', (networkName: string) => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    ethereumWalletMock.switchNetwork(networkName)\n  })\n\n  /**\n   * Connects the wallet to a dApp.\n   * @param wallet - Optional wallet configuration to use for the connection.\n   */\n  Cypress.Commands.add('connectToDapp', (wallet?: WalletMock) => {\n    const ethereumWalletMock = getEthereumWalletMock()\n    ethereumWalletMock.connectToDapp(wallet)\n  })\n}\n"]}