{"version":3,"sources":["../../../src/cypress/support/synpressCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference types=\"cypress\" />\n// ***********************************************\n// This example commands.ts shows you how to\n// create various custom commands and overwrite\n// existing commands.\n//\n// For more comprehensive examples of custom\n// commands please read more here:\n// https://on.cypress.io/custom-commands\n// ***********************************************\n\nimport type { Anvil, CreateAnvilOptions } from '@viem/anvil'\nimport type { SettingsSidebarMenus } from '../../selectors/pages/HomePage/settings'\nimport type { GasSettings } from '../../type/GasSettings'\nimport type { Network } from '../../type/Network'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      importWallet(seedPhrase: string): Chainable<void>\n      importWalletFromPrivateKey(privateKey: string): Chainable<void>\n\n      getAccount(): Chainable<string>\n      getNetwork(): Chainable<string>\n\n      connectToDapp(accounts?: string[]): Chainable<void>\n\n      addNewAccount(accountName: string): Chainable<void>\n      switchAccount(accountName: string): Chainable<void>\n      renameAccount(currentAccountName: string, newAccountName: string): Chainable<void>\n      getAccountAddress(): Chainable<string>\n      resetAccount(): Chainable<void>\n\n      switchNetwork(networkName: string, isTestnet?: boolean): Chainable<void>\n      createAnvilNode(options?: CreateAnvilOptions): Chainable<{\n        anvil: Anvil\n        rpcUrl: string\n        chainId: number\n      }>\n      connectToAnvil(): Chainable<void>\n      emptyAnvilNode(): Chainable<void>\n      addNetwork(network: Network): Chainable<void>\n      approveNewNetwork(): Chainable<void>\n      approveSwitchNetwork(): Chainable<void>\n      rejectNewNetwork(): Chainable<void>\n      rejectSwitchNetwork(): Chainable<void>\n\n      deployToken(): Chainable<void>\n      addNewToken(): Chainable<void>\n      approveTokenPermission(options?: {\n        spendLimit?: number | 'max'\n        gasSetting?: GasSettings\n      }): Chainable<void>\n      rejectTokenPermission(): Chainable<void>\n\n      providePublicEncryptionKey(): Chainable<void>\n      decrypt(): Chainable<void>\n      confirmSignature(): Chainable<void>\n      rejectSignature(): Chainable<void>\n      confirmTransaction(options?: { gasSetting?: GasSettings }): Chainable<void>\n      rejectTransaction(): Chainable<void>\n      confirmTransactionAndWaitForMining(): Chainable<void>\n      openTransactionDetails(txIndex: number): Chainable<void>\n      closeTransactionDetails(): Chainable<void>\n\n      lock(): Chainable<void>\n      unlock(): Chainable<void>\n\n      toggleShowTestNetworks(): Chainable<void>\n      toggleDismissSecretRecoveryPhraseReminder(): Chainable<void>\n\n      goBackToHomePage(): Chainable<void>\n      openSettings(): Chainable<void>\n      openSidebarMenu(menu: SettingsSidebarMenus): Chainable<void>\n    }\n  }\n}\n\n/**\n * Synpress Commands for MetaMask\n *\n * This module extends Cypress with custom commands for interacting with MetaMask and Ethereum networks.\n * It provides a wide range of functionalities including wallet management, account operations,\n * network interactions, token handling, transaction management, and MetaMask UI interactions.\n *\n * @module SynpressCommandsForMetaMask\n *\n * Key features:\n * - Wallet: Import wallet, connect to dApps\n * - Account: Add, switch, rename, reset accounts\n * - Network: Switch networks, create and manage Anvil nodes, add custom networks\n * - Tokens: Deploy tokens, add new tokens, approve token permissions\n * - Transactions: Confirm, reject, and view transaction details\n * - MetaMask UI: Lock/unlock, toggle settings, navigate UI\n *\n * These commands enhance the testing capabilities for Ethereum-based applications,\n * allowing for comprehensive end-to-end testing of dApps integrated with MetaMask.\n */\n\n/**\n * Initializes Synpress commands for MetaMask\n */\nexport default function synpressCommandsForMetaMask(): void {\n  // Wallet\n\n  /**\n   * Imports a wallet using a seed phrase\n   * @param seedPhrase - The seed phrase to import\n   */\n  Cypress.Commands.add('importWallet', (seedPhrase: string) => {\n    return cy.task('importWallet', seedPhrase)\n  })\n\n  /**\n   * Imports a wallet using a private key\n   * @param privateKey - The private key to import\n   */\n  Cypress.Commands.add('importWalletFromPrivateKey', (privateKey: string) => {\n    return cy.task('importWalletFromPrivateKey', privateKey)\n  })\n\n  /**\n   * Connects to a dApp\n   */\n  Cypress.Commands.add('connectToDapp', () => {\n    return cy.task('connectToDapp')\n  })\n\n  // Account\n\n  /**\n   * Gets the current account\n   */\n  Cypress.Commands.add('getAccount', () => {\n    return cy.task('getAccount')\n  })\n\n  /**\n   * Adds a new account\n   * @param accountName - The name of the new account\n   */\n  Cypress.Commands.add('addNewAccount', (accountName: string) => {\n    return cy.task('addNewAccount', accountName)\n  })\n\n  /**\n   * Switches to a different account\n   * @param accountName - The name of the account to switch to\n   */\n  Cypress.Commands.add('switchAccount', (accountName: string) => {\n    return cy.task('switchAccount', accountName)\n  })\n\n  /**\n   * Renames an account\n   * @param currentAccountName - The current name of the account\n   * @param newAccountName - The new name for the account\n   */\n  Cypress.Commands.add('renameAccount', (currentAccountName: string, newAccountName: string) => {\n    return cy.task('renameAccount', { currentAccountName, newAccountName })\n  })\n\n  /**\n   * Gets the address of the current account\n   * @returns The account address\n   */\n  Cypress.Commands.add('getAccountAddress', () => {\n    return cy.task('getAccountAddress')\n  })\n\n  /**\n   * Resets the current account\n   */\n  Cypress.Commands.add('resetAccount', () => {\n    return cy.task('resetAccount')\n  })\n\n  // Network\n\n  /**\n   * Gets the current network\n   */\n  Cypress.Commands.add('getNetwork', () => {\n    return cy.task('getNetwork')\n  })\n\n  /**\n   * Switches to a different network\n   * @param networkName - The name of the network to switch to\n   * @param isTestnet - Whether the network is a testnet\n   */\n  Cypress.Commands.add('switchNetwork', (networkName: string, isTestnet = false) => {\n    return cy.task('switchNetwork', { networkName, isTestnet })\n  })\n\n  /**\n   * Creates an Anvil node\n   * @param options - Options for creating the Anvil node\n   * @returns An object containing the Anvil instance, RPC URL, and chain ID\n   */\n  Cypress.Commands.add('createAnvilNode', (options?: CreateAnvilOptions) => {\n    return cy.task('createAnvilNode', options)\n  })\n\n  /**\n   * Connects to an Anvil node\n   */\n  Cypress.Commands.add('connectToAnvil', () => {\n    return cy.task('createAnvilNode').then((anvilNetwork) => {\n      const anvilNetworkDetails = anvilNetwork as {\n        anvil: Anvil\n        rpcUrl: string\n        chainId: number\n      }\n\n      const network = {\n        name: 'Anvil',\n        rpcUrl: anvilNetworkDetails.rpcUrl,\n        chainId: anvilNetworkDetails.chainId,\n        symbol: 'ETH',\n        blockExplorerUrl: 'https://etherscan.io/'\n      }\n\n      return cy.task('addNetwork', network)\n    })\n  })\n\n  /**\n   * Empties the Anvil node\n   */\n  Cypress.Commands.add('emptyAnvilNode', () => {\n    return cy.task('emptyAnvilNode')\n  })\n\n  /**\n   * Adds a new network\n   * @param network - The network to add\n   */\n  Cypress.Commands.add('addNetwork', (network: Network) => {\n    return cy.task('addNetwork', network)\n  })\n\n  /**\n   * Approves adding a new network\n   */\n  Cypress.Commands.add('approveNewNetwork', () => {\n    return cy.task('approveNewNetwork')\n  })\n\n  /**\n   * Approves switching to a new network\n   */\n  Cypress.Commands.add('approveSwitchNetwork', () => {\n    return cy.task('approveSwitchNetwork')\n  })\n\n  /**\n   * Rejects adding a new network\n   */\n  Cypress.Commands.add('rejectNewNetwork', () => {\n    return cy.task('rejectNewNetwork')\n  })\n\n  /**\n   * Rejects switching to a new network\n   */\n  Cypress.Commands.add('rejectSwitchNetwork', () => {\n    return cy.task('rejectSwitchNetwork')\n  })\n\n  // Token\n\n  /**\n   * Deploys a token\n   */\n  Cypress.Commands.add('deployToken', () => {\n    return cy.task('deployToken')\n  })\n\n  /**\n   * Adds a new token\n   */\n  Cypress.Commands.add('addNewToken', () => {\n    return cy.task('addNewToken')\n  })\n\n  /**\n   * Approves token permission\n   * @param options - Options for approving token permission\n   * @param options.spendLimit - The spend limit for the token\n   * @param options.gasSetting - Gas settings for the transaction\n   */\n  Cypress.Commands.add(\n    'approveTokenPermission',\n    (options?: {\n      spendLimit?: number | 'max'\n      gasSetting?: GasSettings\n    }) => {\n      return cy.task('approveTokenPermission', options)\n    }\n  )\n\n  /**\n   * Rejects token permission\n   */\n  Cypress.Commands.add('rejectTokenPermission', () => {\n    return cy.task('rejectTokenPermission')\n  })\n\n  // Lock/Unlock\n\n  /**\n   * Locks MetaMask\n   */\n  Cypress.Commands.add('lock', () => {\n    return cy.task('lock')\n  })\n\n  /**\n   * Unlocks MetaMask\n   */\n  Cypress.Commands.add('unlock', () => {\n    return cy.task('unlock')\n  })\n\n  // Toggles\n\n  /**\n   * Toggles showing test networks\n   */\n  Cypress.Commands.add('toggleShowTestNetworks', () => {\n    return cy.task('toggleShowTestNetworks')\n  })\n\n  /**\n   * Toggles dismissing the secret recovery phrase reminder\n   */\n  Cypress.Commands.add('toggleDismissSecretRecoveryPhraseReminder', () => {\n    return cy.task('toggleDismissSecretRecoveryPhraseReminder')\n  })\n\n  // Others\n\n  /**\n   * Provides a public encryption key\n   */\n  Cypress.Commands.add('providePublicEncryptionKey', () => {\n    return cy.task('providePublicEncryptionKey')\n  })\n\n  /**\n   * Decrypts a message\n   */\n  Cypress.Commands.add('decrypt', () => {\n    return cy.task('decrypt')\n  })\n\n  /**\n   * Confirms a signature\n   */\n  Cypress.Commands.add('confirmSignature', () => {\n    return cy.task('confirmSignature')\n  })\n\n  /**\n   * Rejects a signature\n   */\n  Cypress.Commands.add('rejectSignature', () => {\n    return cy.task('rejectSignature')\n  })\n\n  /**\n   * Confirms a transaction\n   * @param options - Options for confirming the transaction\n   * @param options.gasSetting - Gas settings for the transaction\n   */\n  Cypress.Commands.add('confirmTransaction', (options?: { gasSetting?: GasSettings }) => {\n    return cy.task('confirmTransaction', options)\n  })\n\n  /**\n   * Rejects a transaction\n   */\n  Cypress.Commands.add('rejectTransaction', () => {\n    return cy.task('rejectTransaction')\n  })\n\n  /**\n   * Confirms a transaction and waits for mining\n   */\n  Cypress.Commands.add('confirmTransactionAndWaitForMining', () => {\n    return cy.task('confirmTransactionAndWaitForMining')\n  })\n\n  /**\n   * Opens transaction details\n   * @param txIndex - The index of the transaction to open\n   */\n  Cypress.Commands.add('openTransactionDetails', (txIndex = 0) => {\n    return cy.task('openTransactionDetails', txIndex)\n  })\n\n  /**\n   * Closes transaction details\n   */\n  Cypress.Commands.add('closeTransactionDetails', () => {\n    return cy.task('closeTransactionDetails')\n  })\n\n  /**\n   * Goes back to the home page\n   */\n  Cypress.Commands.add('goBackToHomePage', () => {\n    return cy.task('goBackToHomePage')\n  })\n\n  /**\n   * Opens settings\n   */\n  Cypress.Commands.add('openSettings', () => {\n    return cy.task('openSettings')\n  })\n\n  /**\n   * Opens a sidebar menu\n   * @param menu - The menu to open\n   */\n  Cypress.Commands.add('openSidebarMenu', (menu: SettingsSidebarMenus) => {\n    return cy.task('openSidebarMenu', menu)\n  })\n}\n"]}