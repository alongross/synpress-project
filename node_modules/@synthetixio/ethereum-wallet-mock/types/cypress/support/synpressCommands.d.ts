import type { Network } from '../../type/Network';
import type { WalletMock } from '../../type/WalletMock';
declare global {
    namespace Cypress {
        interface Chainable {
            importWallet(seedPhrase: string): Chainable<void>;
            importWalletFromPrivateKey(privateKey: `0x${string}`): Chainable<void>;
            addNewAccount(): Chainable<void>;
            getAllAccounts(): Chainable<Array<`0x${string}`>>;
            getAccountAddress(): Chainable<`0x${string}`>;
            switchAccount(accountAddress: string): Chainable<void>;
            addNetwork(network: Network): Chainable<void>;
            switchNetwork(networkName: string): Chainable<void>;
            connectToDapp(wallet?: WalletMock): Chainable<void>;
        }
        interface ApplicationWindow {
            Web3Mock: {
                mock: (options: {
                    blockchain: string;
                    wallet: string;
                    accounts?: {
                        return: Array<string>;
                    };
                    network?: {
                        add: {
                            chainId: number;
                            chainName: string;
                            nativeCurrency: {
                                name: string;
                                symbol: string;
                                decimals: number;
                            } | undefined;
                            rpcUrls: Array<string>;
                        };
                    };
                }) => void;
            };
        }
    }
}
/**
 * Synpress Commands for Ethereum Wallet Mock
 *
 * This module extends Cypress with custom commands for interacting with a mocked Ethereum wallet.
 * It provides functionalities for wallet management, account operations, and network interactions.
 *
 * Key features include:
 * - Wallet: Import wallet from seed phrase or private key
 * - Account: Add new accounts, get all accounts, switch between accounts
 * - Network: Add new networks, switch between networks
 * - dApp Interaction: Connect to dApps
 *
 * These commands enhance the testing capabilities for Ethereum-based applications,
 * allowing for comprehensive end-to-end testing of dApps using a mocked Ethereum wallet.
 * This approach provides a controlled environment for testing without the need for a real wallet,
 * making tests more reliable and easier to set up.
 *
 * @module SynpressCommandsForEthereumWalletMock
 */
/**
 * Initializes Synpress commands for the Ethereum Wallet Mock.
 *
 * This function adds custom Cypress commands for interacting with a mocked Ethereum wallet.
 * These commands include wallet import, account management, network operations, and dApp connections.
 *
 * @example
 * ```typescript
 * import { synpressCommandsForEthereumWalletMock } from '@synthetixio/synpress';
 *
 * synpressCommandsForEthereumWalletMock();
 * ```
 */
export default function synpressCommandsForEthereumWalletMock(): void;
//# sourceMappingURL=synpressCommands.d.ts.map