// src/cypress/support/synpressCommands.ts
function synpressCommandsForMetaMask() {
  Cypress.Commands.add("importWallet", (seedPhrase) => {
    return cy.task("importWallet", seedPhrase);
  });
  Cypress.Commands.add("importWalletFromPrivateKey", (privateKey) => {
    return cy.task("importWalletFromPrivateKey", privateKey);
  });
  Cypress.Commands.add("connectToDapp", () => {
    return cy.task("connectToDapp");
  });
  Cypress.Commands.add("getAccount", () => {
    return cy.task("getAccount");
  });
  Cypress.Commands.add("addNewAccount", (accountName) => {
    return cy.task("addNewAccount", accountName);
  });
  Cypress.Commands.add("switchAccount", (accountName) => {
    return cy.task("switchAccount", accountName);
  });
  Cypress.Commands.add("renameAccount", (currentAccountName, newAccountName) => {
    return cy.task("renameAccount", { currentAccountName, newAccountName });
  });
  Cypress.Commands.add("getAccountAddress", () => {
    return cy.task("getAccountAddress");
  });
  Cypress.Commands.add("resetAccount", () => {
    return cy.task("resetAccount");
  });
  Cypress.Commands.add("getNetwork", () => {
    return cy.task("getNetwork");
  });
  Cypress.Commands.add("switchNetwork", (networkName, isTestnet = false) => {
    return cy.task("switchNetwork", { networkName, isTestnet });
  });
  Cypress.Commands.add("createAnvilNode", (options) => {
    return cy.task("createAnvilNode", options);
  });
  Cypress.Commands.add("connectToAnvil", () => {
    return cy.task("createAnvilNode").then((anvilNetwork) => {
      const anvilNetworkDetails = anvilNetwork;
      const network = {
        name: "Anvil",
        rpcUrl: anvilNetworkDetails.rpcUrl,
        chainId: anvilNetworkDetails.chainId,
        symbol: "ETH",
        blockExplorerUrl: "https://etherscan.io/"
      };
      return cy.task("addNetwork", network);
    });
  });
  Cypress.Commands.add("emptyAnvilNode", () => {
    return cy.task("emptyAnvilNode");
  });
  Cypress.Commands.add("addNetwork", (network) => {
    return cy.task("addNetwork", network);
  });
  Cypress.Commands.add("approveNewNetwork", () => {
    return cy.task("approveNewNetwork");
  });
  Cypress.Commands.add("approveSwitchNetwork", () => {
    return cy.task("approveSwitchNetwork");
  });
  Cypress.Commands.add("rejectNewNetwork", () => {
    return cy.task("rejectNewNetwork");
  });
  Cypress.Commands.add("rejectSwitchNetwork", () => {
    return cy.task("rejectSwitchNetwork");
  });
  Cypress.Commands.add("deployToken", () => {
    return cy.task("deployToken");
  });
  Cypress.Commands.add("addNewToken", () => {
    return cy.task("addNewToken");
  });
  Cypress.Commands.add(
    "approveTokenPermission",
    (options) => {
      return cy.task("approveTokenPermission", options);
    }
  );
  Cypress.Commands.add("rejectTokenPermission", () => {
    return cy.task("rejectTokenPermission");
  });
  Cypress.Commands.add("lock", () => {
    return cy.task("lock");
  });
  Cypress.Commands.add("unlock", () => {
    return cy.task("unlock");
  });
  Cypress.Commands.add("toggleShowTestNetworks", () => {
    return cy.task("toggleShowTestNetworks");
  });
  Cypress.Commands.add("toggleDismissSecretRecoveryPhraseReminder", () => {
    return cy.task("toggleDismissSecretRecoveryPhraseReminder");
  });
  Cypress.Commands.add("providePublicEncryptionKey", () => {
    return cy.task("providePublicEncryptionKey");
  });
  Cypress.Commands.add("decrypt", () => {
    return cy.task("decrypt");
  });
  Cypress.Commands.add("confirmSignature", () => {
    return cy.task("confirmSignature");
  });
  Cypress.Commands.add("rejectSignature", () => {
    return cy.task("rejectSignature");
  });
  Cypress.Commands.add("confirmTransaction", (options) => {
    return cy.task("confirmTransaction", options);
  });
  Cypress.Commands.add("rejectTransaction", () => {
    return cy.task("rejectTransaction");
  });
  Cypress.Commands.add("confirmTransactionAndWaitForMining", () => {
    return cy.task("confirmTransactionAndWaitForMining");
  });
  Cypress.Commands.add("openTransactionDetails", (txIndex = 0) => {
    return cy.task("openTransactionDetails", txIndex);
  });
  Cypress.Commands.add("closeTransactionDetails", () => {
    return cy.task("closeTransactionDetails");
  });
  Cypress.Commands.add("goBackToHomePage", () => {
    return cy.task("goBackToHomePage");
  });
  Cypress.Commands.add("openSettings", () => {
    return cy.task("openSettings");
  });
  Cypress.Commands.add("openSidebarMenu", (menu) => {
    return cy.task("openSidebarMenu", menu);
  });
}

export { synpressCommandsForMetaMask as synpressCommands };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map