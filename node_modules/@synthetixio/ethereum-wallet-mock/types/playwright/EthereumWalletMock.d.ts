import type { Page } from '@playwright/test';
import { EthereumWalletMockAbstract } from '../type/EthereumWalletMockAbstract';
import type { Network } from '../type/Network';
import type { WalletMock } from '../type/WalletMock';
/**
 * Mock implementation of an Ethereum wallet for testing purposes.
 * Simulates wallet behavior in a controlled environment, allowing for consistent
 * and reproducible tests without relying on actual blockchain interactions.
 *
 * @class
 * @extends {EthereumWalletMockAbstract}
 */
export default class EthereumWalletMock extends EthereumWalletMockAbstract {
    /** The Playwright Page object to interact with. */
    page: Page;
    /**
     * Creates an instance of EthereumWalletMock.
     * @param page - The Playwright Page object to interact with.
     * @param wallet - The type of wallet to mock.
     */
    constructor(page: Page, wallet?: WalletMock);
    /**
     * Imports a wallet using the given seed phrase.
     * @param seedPhrase - The seed phrase to import.
     * @returns A promise that resolves when the wallet is imported.
     */
    importWallet(seedPhrase: string): Promise<void>;
    /**
     * Retrieves all account addresses.
     * @returns A promise that resolves to an array of account addresses.
     */
    getAllAccounts(): Promise<`0x${string}`[] | undefined>;
    /**
     * Adds a new account based on the initially imported seed phrase.
     * @returns A promise that resolves when the new account is added.
     */
    addNewAccount(): Promise<void>;
    /**
     * Imports a wallet using the given private key.
     * @param privateKey - The private key to import.
     * @returns A promise that resolves when the wallet is imported.
     */
    importWalletFromPrivateKey(privateKey: `0x${string}`): Promise<void>;
    /**
     * Switches to the account with the given address.
     * @param accountAddress - The address of the account to switch to.
     * @returns A promise that resolves when the account switch is complete.
     */
    switchAccount(accountAddress: string): Promise<void>;
    /**
     * Adds a new network.
     * @param network - The network object to use for adding the new network.
     * @returns A promise that resolves when the network is added.
     */
    addNetwork(network: Network): Promise<void>;
    /**
     * Retrieves the current account address.
     * @returns A promise that resolves to the current account address.
     */
    getAccountAddress(): Promise<`0x${string}` | undefined>;
    /**
     * Switches to the network with the given name.
     * @param networkName - The name of the network to switch to.
     * @returns A promise that resolves when the network switch is complete.
     */
    switchNetwork(networkName: string): Promise<void>;
    /**
     * Connects wallet to the dapp.
     * @param wallet - The wallet to connect to the dapp.
     * @returns A promise that resolves when the wallet is connected to the dapp.
     */
    connectToDapp(wallet?: WalletMock): Promise<void>;
}
//# sourceMappingURL=EthereumWalletMock.d.ts.map