import type { Page } from '@playwright/test';
import type { GasSettings } from '../../../type/GasSettings';
export declare class NotificationPage {
    static readonly selectors: {
        ActionFooter: {
            confirmActionButton: string;
            rejectActionButton: string;
        };
        ConnectPage: {
            accountOption: string;
            accountCheckbox: string;
        };
        SignaturePage: {
            simpleMessage: {
                signButton: string;
                rejectButton: string;
            };
            structuredMessage: {
                scrollDownButton: string;
                signButton: string;
                rejectButton: string;
            };
            riskModal: {
                signButton: string;
            };
        };
        NetworkPage: {
            addNetwork: {
                approveButton: string;
                cancelButton: string;
            };
            switchNetwork: {
                switchNetworkButton: string;
                cancelButton: string;
            };
        };
        PermissionPage: {
            approve: {
                maxButton: string;
                customSpendingCapInput: string;
            };
        };
        TransactionPage: {
            editGasFeeMenu: {
                editGasFeeButton: string;
                editGasFeeButtonToolTip: string;
                lowGasFee: {
                    button: string;
                    maxFee: string;
                };
                marketGasFee: {
                    button: string;
                    maxFee: string;
                };
                aggressiveGasFee: {
                    button: string;
                    maxFee: string;
                };
                siteSuggestedGasFeeButton: string;
                advancedGasFeeButton: string;
                advancedGasFeeMenu: {
                    maxBaseFeeInput: string;
                    priorityFeeInput: string;
                    gasLimitEditButton: string;
                    gasLimitInput: string;
                    gasLimitError: string;
                    saveButton: string;
                };
            };
            nftApproveAllConfirmationPopup: {
                approveButton: string;
            };
        };
    };
    readonly selectors: {
        ActionFooter: {
            confirmActionButton: string;
            rejectActionButton: string;
        };
        ConnectPage: {
            accountOption: string;
            accountCheckbox: string;
        };
        SignaturePage: {
            simpleMessage: {
                signButton: string;
                rejectButton: string;
            };
            structuredMessage: {
                scrollDownButton: string;
                signButton: string;
                rejectButton: string;
            };
            riskModal: {
                signButton: string;
            };
        };
        NetworkPage: {
            addNetwork: {
                approveButton: string;
                cancelButton: string;
            };
            switchNetwork: {
                switchNetworkButton: string;
                cancelButton: string;
            };
        };
        PermissionPage: {
            approve: {
                maxButton: string;
                customSpendingCapInput: string;
            };
        };
        TransactionPage: {
            editGasFeeMenu: {
                editGasFeeButton: string;
                editGasFeeButtonToolTip: string;
                lowGasFee: {
                    button: string;
                    maxFee: string;
                };
                marketGasFee: {
                    button: string;
                    maxFee: string;
                };
                aggressiveGasFee: {
                    button: string;
                    maxFee: string;
                };
                siteSuggestedGasFeeButton: string;
                advancedGasFeeButton: string;
                advancedGasFeeMenu: {
                    maxBaseFeeInput: string;
                    priorityFeeInput: string;
                    gasLimitEditButton: string;
                    gasLimitInput: string;
                    gasLimitError: string;
                    saveButton: string;
                };
            };
            nftApproveAllConfirmationPopup: {
                approveButton: string;
            };
        };
    };
    readonly page: Page;
    constructor(page: Page);
    connectToDapp(extensionId: string, accounts?: string[]): Promise<void>;
    private beforeMessageSignature;
    signMessage(extensionId: string): Promise<void>;
    signMessageWithRisk(extensionId: string): Promise<void>;
    rejectMessage(extensionId: string): Promise<void>;
    approveNewNetwork(extensionId: string): Promise<void>;
    rejectNewNetwork(extensionId: string): Promise<void>;
    approveSwitchNetwork(extensionId: string): Promise<void>;
    rejectSwitchNetwork(extensionId: string): Promise<void>;
    confirmTransaction(extensionId: string, options?: {
        gasSetting?: GasSettings;
    }): Promise<void>;
    rejectTransaction(extensionId: string): Promise<void>;
    confirmTransactionAndWaitForMining(extensionId: string, options?: {
        gasSetting?: GasSettings;
    }): Promise<void>;
    approveTokenPermission(extensionId: string, options?: {
        spendLimit?: 'max' | number;
        gasSetting?: GasSettings;
    }): Promise<void>;
    rejectTokenPermission(extensionId: string): Promise<void>;
    addNewToken(extensionId: string): Promise<void>;
    providePublicEncryptionKey(extensionId: string): Promise<void>;
    decryptMessage(extensionId: string): Promise<void>;
}
//# sourceMappingURL=page.d.ts.map