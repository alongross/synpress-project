import { ensureRdpPort } from '@synthetixio/synpress-core';
import { readFileSync } from 'fs';
import { chromium } from '@playwright/test';
import { createRequire } from 'module';
import { mnemonicToAccount, privateKeyToAccount } from 'viem/accounts';

// src/cypress/utils/configureSynpress.ts

// src/playwright/utils/mockEthereum.ts
function mockEthereum(wallet = "metamask", accounts = []) {
  Web3Mock.mock({
    blockchain: "ethereum",
    wallet,
    accounts: {
      return: accounts
    }
  });
}
var require2 = createRequire(import.meta.url);
var web3MockPath = require2.resolve("@depay/web3-mock/dist/umd/index.bundle.js");

// src/cypress/constants/errors.ts
var NO_CONTEXT = "No browser context found. Connect Playwright first - connectPlaywright()";
var NO_PAGE = "No page found. Use getPage()";

// src/cypress/utils/initEthereumWalletMock.ts
var context;
var cypressPage;
var getCypressPage = async () => {
  if (!context) {
    console.error(NO_CONTEXT);
    return;
  }
  cypressPage = context.pages()[0];
  return cypressPage;
};
async function connectPlaywrightToChrome(port2) {
  const debuggerDetails = await fetch(`http://127.0.0.1:${port2}/json/version`);
  const debuggerDetailsConfig = await debuggerDetails.json();
  const browser = await chromium.connectOverCDP(debuggerDetailsConfig.webSocketDebuggerUrl);
  context = browser.contexts()[0];
  return browser.isConnected();
}
async function initEthereumWalletMock(port2) {
  await connectPlaywrightToChrome(port2);
  if (!context) {
    console.error(NO_CONTEXT);
    return;
  }
  await getCypressPage();
  if (!cypressPage) {
    console.error(NO_PAGE);
    return;
  }
  await context.addInitScript({
    content: `${readFileSync(web3MockPath, "utf-8")}
(${mockEthereum.toString()})();`
  });
}

// src/cypress/utils/configureSynpress.ts
var port;
function configureSynpress(on, config) {
  const browsers = config.browsers.filter((b) => b.name === "chrome");
  if (browsers.length === 0) {
    throw new Error("No Chrome browser found in the configuration");
  }
  on("before:browser:launch", async (_, launchOptions) => {
    const args = Array.isArray(launchOptions) ? launchOptions : launchOptions.args;
    port = ensureRdpPort(args);
  });
  on("before:spec", async () => {
    await initEthereumWalletMock(port);
  });
  return {
    ...config,
    browsers
  };
}

// src/constants.ts
var BLOCKCHAIN = "ethereum";
var ACCOUNT_MOCK = "0xd73b04b0e696b0945283defa3eee453814758f1a";

// src/type/EthereumWalletMockAbstract.ts
var EthereumWalletMockAbstract = class {
  seedPhrase;
  wallet;
  constructor(wallet = "metamask") {
    this.wallet = wallet;
  }
};

// src/cypress/EthereumWalletMock.ts
var EthereumWalletMock = class extends EthereumWalletMockAbstract {
  constructor(wallet = "metamask") {
    super(wallet);
    this.wallet = wallet;
  }
  // /**
  //  * Imports a wallet using the given seed phrase.
  //  *
  //  * @param seedPhrase - The seed phrase to import.
  //  */
  importWallet(seedPhrase) {
    this.seedPhrase = seedPhrase;
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        accounts: { return: [ACCOUNT_MOCK] }
      });
    });
  }
  // /**
  //  * Retrieves the current account address.
  //  */
  getAllAccounts() {
    return cy.window().then((cypressWindow) => {
      return cypressWindow.ethereum.request({
        method: "eth_requestAccounts"
      });
    });
  }
  // /**
  //  * Adds a new account. This account is based on the initially imported seed phrase.
  //  */
  addNewAccount() {
    this.getAllAccounts().then((accounts) => {
      const newAccount = mnemonicToAccount(this.seedPhrase || "", {
        accountIndex: accounts?.length
      });
      cy.window().then((cypressWindow) => {
        cypressWindow.Web3Mock.mock({
          blockchain: BLOCKCHAIN,
          wallet: this.wallet,
          accounts: {
            return: [newAccount.address, ...accounts]
          }
        });
      });
    });
  }
  // /**
  //  * Imports a wallet using the given private key.
  //  *
  //  * @param privateKey - The private key to import.
  //  */
  importWalletFromPrivateKey(privateKey) {
    const newAccount = privateKeyToAccount(privateKey);
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        accounts: { return: [newAccount.address] }
      });
    });
  }
  /**
  //  * Switches to the account with the given name.
  //  *
  //  * @param accountAddress - The name of the account to switch to.
  //  */
  switchAccount(accountAddress) {
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        accounts: { return: [accountAddress] }
      });
    });
  }
  /**
  //  * Adds a new network.
  //  *
  //  * @param network - The network object to use for adding the new network.
  //  */
  async addNetwork(network) {
    const networkInfo = {
      chainId: network.chainId,
      chainName: network.name,
      nativeCurrency: network.nativeCurrency,
      rpcUrls: [network.rpcUrl],
      blockExplorerUrls: [network.blockExplorerUrl]
    };
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        network: {
          add: networkInfo
        }
      });
    });
  }
  // /**
  //  * Retrieves the current account address.
  //  */
  getAccountAddress() {
    return this.getAllAccounts().then((accounts) => {
      return accounts[0];
    });
  }
  // /**
  //  * Switches to the network with the given name.
  //  *
  //  * @param networkName - The name of the network to switch to.
  //  */
  async switchNetwork(networkName) {
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        network: {
          add: {
            chainId: 1,
            chainName: networkName,
            nativeCurrency: {
              name: "ETH",
              symbol: "ETH",
              decimals: 18
            },
            rpcUrls: ["http://localhost:8545"]
          }
        }
      });
    });
  }
  // /**
  //  * Connects wallet to the dapp.
  //  *
  //  * @param wallet - The wallet to connect to the dapp.
  //  */
  async connectToDapp(wallet = "metamask") {
    this.wallet = wallet;
    cy.window().then((cypressWindow) => {
      class WalletConnectStub {
      }
      let connector;
      if (wallet === "walletconnect") {
        connector = WalletConnectStub;
      }
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet,
        accounts: { return: [ACCOUNT_MOCK] },
        // @ts-ignore
        connector
      });
    });
  }
};

export { EthereumWalletMock, configureSynpress };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map