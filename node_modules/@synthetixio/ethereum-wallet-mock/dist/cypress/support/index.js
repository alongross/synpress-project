import { mnemonicToAccount, privateKeyToAccount } from 'viem/accounts';

// src/cypress/support/mockEthereum.ts
function mockEthereum() {
  before(() => {
    cy.visit("/", {
      onBeforeLoad: (window) => {
        window.Web3Mock.mock({
          blockchain: "ethereum",
          wallet: "metamask"
        });
      }
    });
  });
}

// src/constants.ts
var SEED_PHRASE = "test test test test test test test test test test test junk";
var BLOCKCHAIN = "ethereum";
var ACCOUNT_MOCK = "0xd73b04b0e696b0945283defa3eee453814758f1a";

// src/type/EthereumWalletMockAbstract.ts
var EthereumWalletMockAbstract = class {
  seedPhrase;
  wallet;
  constructor(wallet = "metamask") {
    this.wallet = wallet;
  }
};

// src/cypress/EthereumWalletMock.ts
var EthereumWalletMock = class extends EthereumWalletMockAbstract {
  constructor(wallet = "metamask") {
    super(wallet);
    this.wallet = wallet;
  }
  // /**
  //  * Imports a wallet using the given seed phrase.
  //  *
  //  * @param seedPhrase - The seed phrase to import.
  //  */
  importWallet(seedPhrase) {
    this.seedPhrase = seedPhrase;
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        accounts: { return: [ACCOUNT_MOCK] }
      });
    });
  }
  // /**
  //  * Retrieves the current account address.
  //  */
  getAllAccounts() {
    return cy.window().then((cypressWindow) => {
      return cypressWindow.ethereum.request({
        method: "eth_requestAccounts"
      });
    });
  }
  // /**
  //  * Adds a new account. This account is based on the initially imported seed phrase.
  //  */
  addNewAccount() {
    this.getAllAccounts().then((accounts) => {
      const newAccount = mnemonicToAccount(this.seedPhrase || "", {
        accountIndex: accounts?.length
      });
      cy.window().then((cypressWindow) => {
        cypressWindow.Web3Mock.mock({
          blockchain: BLOCKCHAIN,
          wallet: this.wallet,
          accounts: {
            return: [newAccount.address, ...accounts]
          }
        });
      });
    });
  }
  // /**
  //  * Imports a wallet using the given private key.
  //  *
  //  * @param privateKey - The private key to import.
  //  */
  importWalletFromPrivateKey(privateKey) {
    const newAccount = privateKeyToAccount(privateKey);
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        accounts: { return: [newAccount.address] }
      });
    });
  }
  /**
  //  * Switches to the account with the given name.
  //  *
  //  * @param accountAddress - The name of the account to switch to.
  //  */
  switchAccount(accountAddress) {
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        accounts: { return: [accountAddress] }
      });
    });
  }
  /**
  //  * Adds a new network.
  //  *
  //  * @param network - The network object to use for adding the new network.
  //  */
  async addNetwork(network) {
    const networkInfo = {
      chainId: network.chainId,
      chainName: network.name,
      nativeCurrency: network.nativeCurrency,
      rpcUrls: [network.rpcUrl],
      blockExplorerUrls: [network.blockExplorerUrl]
    };
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        network: {
          add: networkInfo
        }
      });
    });
  }
  // /**
  //  * Retrieves the current account address.
  //  */
  getAccountAddress() {
    return this.getAllAccounts().then((accounts) => {
      return accounts[0];
    });
  }
  // /**
  //  * Switches to the network with the given name.
  //  *
  //  * @param networkName - The name of the network to switch to.
  //  */
  async switchNetwork(networkName) {
    cy.window().then((cypressWindow) => {
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet: this.wallet,
        network: {
          add: {
            chainId: 1,
            chainName: networkName,
            nativeCurrency: {
              name: "ETH",
              symbol: "ETH",
              decimals: 18
            },
            rpcUrls: ["http://localhost:8545"]
          }
        }
      });
    });
  }
  // /**
  //  * Connects wallet to the dapp.
  //  *
  //  * @param wallet - The wallet to connect to the dapp.
  //  */
  async connectToDapp(wallet = "metamask") {
    this.wallet = wallet;
    cy.window().then((cypressWindow) => {
      class WalletConnectStub {
      }
      let connector;
      if (wallet === "walletconnect") {
        connector = WalletConnectStub;
      }
      cypressWindow.Web3Mock.mock({
        blockchain: BLOCKCHAIN,
        wallet,
        accounts: { return: [ACCOUNT_MOCK] },
        // @ts-ignore
        connector
      });
    });
  }
};

// src/cypress/utils/getEthereumWalletMock.ts
var ethereumWalletMock;
function getEthereumWalletMock() {
  if (ethereumWalletMock)
    return ethereumWalletMock;
  ethereumWalletMock = new EthereumWalletMock();
  ethereumWalletMock.importWallet(SEED_PHRASE);
  return ethereumWalletMock;
}

// src/cypress/support/synpressCommands.ts
function synpressCommandsForEthereumWalletMock() {
  Cypress.Commands.add("importWallet", (seedPhrase) => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    ethereumWalletMock2.importWallet(seedPhrase);
  });
  Cypress.Commands.add("importWalletFromPrivateKey", (privateKey) => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    ethereumWalletMock2.importWalletFromPrivateKey(privateKey);
  });
  Cypress.Commands.add("addNewAccount", () => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    return ethereumWalletMock2.addNewAccount();
  });
  Cypress.Commands.add("getAllAccounts", () => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    return ethereumWalletMock2.getAllAccounts();
  });
  Cypress.Commands.add("getAccountAddress", () => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    return ethereumWalletMock2.getAccountAddress();
  });
  Cypress.Commands.add("switchAccount", (accountAddress) => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    ethereumWalletMock2.switchAccount(accountAddress);
  });
  Cypress.Commands.add("addNetwork", (network) => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    ethereumWalletMock2.addNetwork(network);
  });
  Cypress.Commands.add("switchNetwork", (networkName) => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    ethereumWalletMock2.switchNetwork(networkName);
  });
  Cypress.Commands.add("connectToDapp", (wallet) => {
    const ethereumWalletMock2 = getEthereumWalletMock();
    ethereumWalletMock2.connectToDapp(wallet);
  });
}

export { mockEthereum, synpressCommandsForEthereumWalletMock as synpressCommands };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map