import { EthereumWalletMockAbstract } from '../type/EthereumWalletMockAbstract';
import type { Network } from '../type/Network';
import type { WalletMock } from '../type/WalletMock';
export default class EthereumWalletMock extends EthereumWalletMockAbstract {
    constructor(wallet?: WalletMock);
    importWallet(seedPhrase: string): void;
    getAllAccounts(): Cypress.Chainable<`0x${string}`[]>;
    addNewAccount(): void;
    importWalletFromPrivateKey(privateKey: `0x${string}`): void;
    /**
    //  * Switches to the account with the given name.
    //  *
    //  * @param accountAddress - The name of the account to switch to.
    //  */
    switchAccount(accountAddress: string): void;
    /**
    //  * Adds a new network.
    //  *
    //  * @param network - The network object to use for adding the new network.
    //  */
    addNetwork(network: Network): Promise<void>;
    getAccountAddress(): Cypress.Chainable<`0x${string}`>;
    switchNetwork(networkName: string): Promise<void>;
    connectToDapp(wallet?: WalletMock): Promise<void>;
}
//# sourceMappingURL=EthereumWalletMock.d.ts.map