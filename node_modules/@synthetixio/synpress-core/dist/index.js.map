{"version":3,"sources":["../src/testWithSynpress.ts","../src/cypress/ensureRdpPort.ts"],"names":[],"mappings":";AACA,SAAS,YAAY,QAAQ,YAAY;AAuB1B,SAAR,iBACL,gBACkC;AAClC,SAAO,WAAW,MAAM,cAAc;AACxC;;;AC5Be,SAAR,cAA+B,MAAgB;AACpD,QAAM,WAAW,KAAK,KAAK,CAAC,QAAQ,IAAI,MAAM,GAAG,EAAE,MAAM,yBAAyB;AAElF,MAAI,UAAU;AACZ,WAAO,OAAO,SAAS,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,EACtC;AAEA,QAAM,OAAO,MAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,IAAK;AAErD,OAAK,KAAK,2BAA2B,IAAI,EAAE;AAE3C,SAAO;AACT","sourcesContent":["import type { Fixtures, TestType } from '@playwright/test'\nimport { mergeTests, test as base } from '@playwright/test'\n\n/**\n * Creates a test environment with Synpress integration.\n *\n * This function merges the base Playwright test with custom fixtures, allowing for\n * seamless integration of Synpress capabilities in Playwright tests.\n *\n * Synpress is a wrapper around Cypress that adds support for testing\n * Web3 and blockchain applications, particularly those involving\n * MetaMask interactions.\n *\n * @param customFixtures - Custom fixtures to be merged with the base test.\n * @returns A merged test object that includes both Playwright and Synpress capabilities.\n *\n * @example\n * ```typescript\n * const test = testWithSynpress(myCustomFixtures);\n * test('My Web3 test', async ({ page, synpress }) => {\n *   // Test implementation using Playwright and Synpress\n * });\n * ```\n */\nexport default function testWithSynpress<CustomFixtures extends Fixtures>(\n  customFixtures: TestType<CustomFixtures, object>\n): TestType<CustomFixtures, object> {\n  return mergeTests(base, customFixtures)\n}\n","export default function ensureRdpPort(args: string[]) {\n  const existing = args.find((arg) => arg.slice(0, 23) === '--remote-debugging-port')\n\n  if (existing) {\n    return Number(existing.split('=')[1])\n  }\n\n  const port = 40000 + Math.round(Math.random() * 25000)\n\n  args.push(`--remote-debugging-port=${port}`)\n\n  return port\n}\n"]}